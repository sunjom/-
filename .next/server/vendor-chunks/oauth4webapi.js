"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/oauth4webapi";
exports.ids = ["vendor-chunks/oauth4webapi"];
exports.modules = {

/***/ "(rsc)/./node_modules/oauth4webapi/build/index.js":
/*!**************************************************!*\
  !*** ./node_modules/oauth4webapi/build/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTHORIZATION_RESPONSE_ERROR: () => (/* binding */ AUTHORIZATION_RESPONSE_ERROR),\n/* harmony export */   AuthorizationResponseError: () => (/* binding */ AuthorizationResponseError),\n/* harmony export */   ClientSecretBasic: () => (/* binding */ ClientSecretBasic),\n/* harmony export */   ClientSecretJwt: () => (/* binding */ ClientSecretJwt),\n/* harmony export */   ClientSecretPost: () => (/* binding */ ClientSecretPost),\n/* harmony export */   DPoP: () => (/* binding */ DPoP),\n/* harmony export */   HTTP_REQUEST_FORBIDDEN: () => (/* binding */ HTTP_REQUEST_FORBIDDEN),\n/* harmony export */   INVALID_REQUEST: () => (/* binding */ INVALID_REQUEST),\n/* harmony export */   INVALID_RESPONSE: () => (/* binding */ INVALID_RESPONSE),\n/* harmony export */   INVALID_SERVER_METADATA: () => (/* binding */ INVALID_SERVER_METADATA),\n/* harmony export */   JSON_ATTRIBUTE_COMPARISON: () => (/* binding */ JSON_ATTRIBUTE_COMPARISON),\n/* harmony export */   JWT_CLAIM_COMPARISON: () => (/* binding */ JWT_CLAIM_COMPARISON),\n/* harmony export */   JWT_TIMESTAMP_CHECK: () => (/* binding */ JWT_TIMESTAMP_CHECK),\n/* harmony export */   JWT_USERINFO_EXPECTED: () => (/* binding */ JWT_USERINFO_EXPECTED),\n/* harmony export */   KEY_SELECTION: () => (/* binding */ KEY_SELECTION),\n/* harmony export */   MISSING_SERVER_METADATA: () => (/* binding */ MISSING_SERVER_METADATA),\n/* harmony export */   None: () => (/* binding */ None),\n/* harmony export */   OperationProcessingError: () => (/* binding */ OperationProcessingError),\n/* harmony export */   PARSE_ERROR: () => (/* binding */ PARSE_ERROR),\n/* harmony export */   PrivateKeyJwt: () => (/* binding */ PrivateKeyJwt),\n/* harmony export */   REQUEST_PROTOCOL_FORBIDDEN: () => (/* binding */ REQUEST_PROTOCOL_FORBIDDEN),\n/* harmony export */   RESPONSE_BODY_ERROR: () => (/* binding */ RESPONSE_BODY_ERROR),\n/* harmony export */   RESPONSE_IS_NOT_CONFORM: () => (/* binding */ RESPONSE_IS_NOT_CONFORM),\n/* harmony export */   RESPONSE_IS_NOT_JSON: () => (/* binding */ RESPONSE_IS_NOT_JSON),\n/* harmony export */   ResponseBodyError: () => (/* binding */ ResponseBodyError),\n/* harmony export */   TlsClientAuth: () => (/* binding */ TlsClientAuth),\n/* harmony export */   UNSUPPORTED_OPERATION: () => (/* binding */ UNSUPPORTED_OPERATION),\n/* harmony export */   UnsupportedOperationError: () => (/* binding */ UnsupportedOperationError),\n/* harmony export */   WWWAuthenticateChallengeError: () => (/* binding */ WWWAuthenticateChallengeError),\n/* harmony export */   WWW_AUTHENTICATE_CHALLENGE: () => (/* binding */ WWW_AUTHENTICATE_CHALLENGE),\n/* harmony export */   _expectedIssuer: () => (/* binding */ _expectedIssuer),\n/* harmony export */   _nodiscoverycheck: () => (/* binding */ _nodiscoverycheck),\n/* harmony export */   _nopkce: () => (/* binding */ _nopkce),\n/* harmony export */   allowInsecureRequests: () => (/* binding */ allowInsecureRequests),\n/* harmony export */   authorizationCodeGrantRequest: () => (/* binding */ authorizationCodeGrantRequest),\n/* harmony export */   backchannelAuthenticationGrantRequest: () => (/* binding */ backchannelAuthenticationGrantRequest),\n/* harmony export */   backchannelAuthenticationRequest: () => (/* binding */ backchannelAuthenticationRequest),\n/* harmony export */   calculatePKCECodeChallenge: () => (/* binding */ calculatePKCECodeChallenge),\n/* harmony export */   checkProtocol: () => (/* binding */ checkProtocol),\n/* harmony export */   clientCredentialsGrantRequest: () => (/* binding */ clientCredentialsGrantRequest),\n/* harmony export */   clockSkew: () => (/* binding */ clockSkew),\n/* harmony export */   clockTolerance: () => (/* binding */ clockTolerance),\n/* harmony export */   customFetch: () => (/* binding */ customFetch),\n/* harmony export */   deviceAuthorizationRequest: () => (/* binding */ deviceAuthorizationRequest),\n/* harmony export */   deviceCodeGrantRequest: () => (/* binding */ deviceCodeGrantRequest),\n/* harmony export */   discoveryRequest: () => (/* binding */ discoveryRequest),\n/* harmony export */   dynamicClientRegistrationRequest: () => (/* binding */ dynamicClientRegistrationRequest),\n/* harmony export */   expectNoNonce: () => (/* binding */ expectNoNonce),\n/* harmony export */   expectNoState: () => (/* binding */ expectNoState),\n/* harmony export */   formPostResponse: () => (/* binding */ formPostResponse),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   generateRandomCodeVerifier: () => (/* binding */ generateRandomCodeVerifier),\n/* harmony export */   generateRandomNonce: () => (/* binding */ generateRandomNonce),\n/* harmony export */   generateRandomState: () => (/* binding */ generateRandomState),\n/* harmony export */   genericTokenEndpointRequest: () => (/* binding */ genericTokenEndpointRequest),\n/* harmony export */   getContentType: () => (/* binding */ getContentType),\n/* harmony export */   getValidatedIdTokenClaims: () => (/* binding */ getValidatedIdTokenClaims),\n/* harmony export */   introspectionRequest: () => (/* binding */ introspectionRequest),\n/* harmony export */   isDPoPNonceError: () => (/* binding */ isDPoPNonceError),\n/* harmony export */   issueRequestObject: () => (/* binding */ issueRequestObject),\n/* harmony export */   jweDecrypt: () => (/* binding */ jweDecrypt),\n/* harmony export */   jwksCache: () => (/* binding */ jwksCache),\n/* harmony export */   modifyAssertion: () => (/* binding */ modifyAssertion),\n/* harmony export */   processAuthorizationCodeResponse: () => (/* binding */ processAuthorizationCodeResponse),\n/* harmony export */   processBackchannelAuthenticationGrantResponse: () => (/* binding */ processBackchannelAuthenticationGrantResponse),\n/* harmony export */   processBackchannelAuthenticationResponse: () => (/* binding */ processBackchannelAuthenticationResponse),\n/* harmony export */   processClientCredentialsResponse: () => (/* binding */ processClientCredentialsResponse),\n/* harmony export */   processDeviceAuthorizationResponse: () => (/* binding */ processDeviceAuthorizationResponse),\n/* harmony export */   processDeviceCodeResponse: () => (/* binding */ processDeviceCodeResponse),\n/* harmony export */   processDiscoveryResponse: () => (/* binding */ processDiscoveryResponse),\n/* harmony export */   processDynamicClientRegistrationResponse: () => (/* binding */ processDynamicClientRegistrationResponse),\n/* harmony export */   processGenericTokenEndpointResponse: () => (/* binding */ processGenericTokenEndpointResponse),\n/* harmony export */   processIntrospectionResponse: () => (/* binding */ processIntrospectionResponse),\n/* harmony export */   processPushedAuthorizationResponse: () => (/* binding */ processPushedAuthorizationResponse),\n/* harmony export */   processRefreshTokenResponse: () => (/* binding */ processRefreshTokenResponse),\n/* harmony export */   processResourceDiscoveryResponse: () => (/* binding */ processResourceDiscoveryResponse),\n/* harmony export */   processRevocationResponse: () => (/* binding */ processRevocationResponse),\n/* harmony export */   processUserInfoResponse: () => (/* binding */ processUserInfoResponse),\n/* harmony export */   protectedResourceRequest: () => (/* binding */ protectedResourceRequest),\n/* harmony export */   pushedAuthorizationRequest: () => (/* binding */ pushedAuthorizationRequest),\n/* harmony export */   refreshTokenGrantRequest: () => (/* binding */ refreshTokenGrantRequest),\n/* harmony export */   resolveEndpoint: () => (/* binding */ resolveEndpoint),\n/* harmony export */   resourceDiscoveryRequest: () => (/* binding */ resourceDiscoveryRequest),\n/* harmony export */   revocationRequest: () => (/* binding */ revocationRequest),\n/* harmony export */   skipAuthTimeCheck: () => (/* binding */ skipAuthTimeCheck),\n/* harmony export */   skipStateCheck: () => (/* binding */ skipStateCheck),\n/* harmony export */   skipSubjectCheck: () => (/* binding */ skipSubjectCheck),\n/* harmony export */   userInfoRequest: () => (/* binding */ userInfoRequest),\n/* harmony export */   validateApplicationLevelSignature: () => (/* binding */ validateApplicationLevelSignature),\n/* harmony export */   validateAuthResponse: () => (/* binding */ validateAuthResponse),\n/* harmony export */   validateCodeIdTokenResponse: () => (/* binding */ validateCodeIdTokenResponse),\n/* harmony export */   validateDetachedSignatureResponse: () => (/* binding */ validateDetachedSignatureResponse),\n/* harmony export */   validateJwtAccessToken: () => (/* binding */ validateJwtAccessToken),\n/* harmony export */   validateJwtAuthResponse: () => (/* binding */ validateJwtAuthResponse)\n/* harmony export */ });\nconst _excluded = [\"ext\", \"key_ops\", \"use\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nlet USER_AGENT;\nif (typeof navigator === 'undefined' || !navigator.userAgent?.startsWith?.('Mozilla/5.0 ')) {\n  const NAME = 'oauth4webapi';\n  const VERSION = 'v3.5.1';\n  USER_AGENT = `${NAME}/${VERSION}`;\n}\nfunction looseInstanceOf(input, expected) {\n  if (input == null) {\n    return false;\n  }\n  try {\n    return input instanceof expected || Object.getPrototypeOf(input)[Symbol.toStringTag] === expected.prototype[Symbol.toStringTag];\n  } catch {\n    return false;\n  }\n}\nconst ERR_INVALID_ARG_VALUE = 'ERR_INVALID_ARG_VALUE';\nconst ERR_INVALID_ARG_TYPE = 'ERR_INVALID_ARG_TYPE';\nfunction CodedTypeError(message, code, cause) {\n  const err = new TypeError(message, {\n    cause\n  });\n  Object.assign(err, {\n    code\n  });\n  return err;\n}\nconst allowInsecureRequests = Symbol();\nconst clockSkew = Symbol();\nconst clockTolerance = Symbol();\nconst customFetch = Symbol();\nconst modifyAssertion = Symbol();\nconst jweDecrypt = Symbol();\nconst jwksCache = Symbol();\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nfunction buf(input) {\n  if (typeof input === 'string') {\n    return encoder.encode(input);\n  }\n  return decoder.decode(input);\n}\nconst CHUNK_SIZE = 0x8000;\nfunction encodeBase64Url(input) {\n  if (input instanceof ArrayBuffer) {\n    input = new Uint8Array(input);\n  }\n  const arr = [];\n  for (let i = 0; i < input.byteLength; i += CHUNK_SIZE) {\n    arr.push(String.fromCharCode.apply(null, input.subarray(i, i + CHUNK_SIZE)));\n  }\n  return btoa(arr.join('')).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\nfunction decodeBase64Url(input) {\n  try {\n    const binary = atob(input.replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, ''));\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n  } catch (cause) {\n    throw CodedTypeError('The input to be decoded is not correctly encoded.', ERR_INVALID_ARG_VALUE, cause);\n  }\n}\nfunction b64u(input) {\n  if (typeof input === 'string') {\n    return decodeBase64Url(input);\n  }\n  return encodeBase64Url(input);\n}\nclass UnsupportedOperationError extends Error {\n  code;\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    this.code = UNSUPPORTED_OPERATION;\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\nclass OperationProcessingError extends Error {\n  code;\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    if (options?.code) {\n      this.code = options?.code;\n    }\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\nfunction OPE(message, code, cause) {\n  return new OperationProcessingError(message, {\n    code,\n    cause\n  });\n}\nfunction assertCryptoKey(key, it) {\n  if (!(key instanceof CryptoKey)) {\n    throw CodedTypeError(`${it} must be a CryptoKey`, ERR_INVALID_ARG_TYPE);\n  }\n}\nfunction assertPrivateKey(key, it) {\n  assertCryptoKey(key, it);\n  if (key.type !== 'private') {\n    throw CodedTypeError(`${it} must be a private CryptoKey`, ERR_INVALID_ARG_VALUE);\n  }\n}\nfunction assertPublicKey(key, it) {\n  assertCryptoKey(key, it);\n  if (key.type !== 'public') {\n    throw CodedTypeError(`${it} must be a public CryptoKey`, ERR_INVALID_ARG_VALUE);\n  }\n}\nfunction normalizeTyp(value) {\n  return value.toLowerCase().replace(/^application\\//, '');\n}\nfunction isJsonObject(input) {\n  if (input === null || typeof input !== 'object' || Array.isArray(input)) {\n    return false;\n  }\n  return true;\n}\nfunction prepareHeaders(input) {\n  if (looseInstanceOf(input, Headers)) {\n    input = Object.fromEntries(input.entries());\n  }\n  const headers = new Headers(input);\n  if (USER_AGENT && !headers.has('user-agent')) {\n    headers.set('user-agent', USER_AGENT);\n  }\n  if (headers.has('authorization')) {\n    throw CodedTypeError('\"options.headers\" must not include the \"authorization\" header name', ERR_INVALID_ARG_VALUE);\n  }\n  return headers;\n}\nfunction signal(value) {\n  if (typeof value === 'function') {\n    value = value();\n  }\n  if (!(value instanceof AbortSignal)) {\n    throw CodedTypeError('\"options.signal\" must return or be an instance of AbortSignal', ERR_INVALID_ARG_TYPE);\n  }\n  return value;\n}\nfunction replaceDoubleSlash(pathname) {\n  if (pathname.includes('//')) {\n    return pathname.replace('//', '/');\n  }\n  return pathname;\n}\nfunction prependWellKnown(url, wellKnown) {\n  if (url.pathname === '/') {\n    url.pathname = wellKnown;\n  } else {\n    url.pathname = replaceDoubleSlash(`${wellKnown}/${url.pathname}`);\n  }\n  return url;\n}\nfunction appendWellKnown(url, wellKnown) {\n  url.pathname = replaceDoubleSlash(`${url.pathname}/${wellKnown}`);\n  return url;\n}\nasync function performDiscovery(input, urlName, transform, options) {\n  if (!(input instanceof URL)) {\n    throw CodedTypeError(`\"${urlName}\" must be an instance of URL`, ERR_INVALID_ARG_TYPE);\n  }\n  checkProtocol(input, options?.[allowInsecureRequests] !== true);\n  const url = transform(new URL(input.href));\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  return (options?.[customFetch] || fetch)(url.href, {\n    body: undefined,\n    headers: Object.fromEntries(headers.entries()),\n    method: 'GET',\n    redirect: 'manual',\n    signal: options?.signal ? signal(options.signal) : undefined\n  });\n}\nasync function discoveryRequest(issuerIdentifier, options) {\n  return performDiscovery(issuerIdentifier, 'issuerIdentifier', url => {\n    switch (options?.algorithm) {\n      case undefined:\n      case 'oidc':\n        appendWellKnown(url, '.well-known/openid-configuration');\n        break;\n      case 'oauth2':\n        prependWellKnown(url, '.well-known/oauth-authorization-server');\n        break;\n      default:\n        throw CodedTypeError('\"options.algorithm\" must be \"oidc\" (default), or \"oauth2\"', ERR_INVALID_ARG_VALUE);\n    }\n    return url;\n  }, options);\n}\nfunction assertNumber(input, allow0, it, code, cause) {\n  try {\n    if (typeof input !== 'number' || !Number.isFinite(input)) {\n      throw CodedTypeError(`${it} must be a number`, ERR_INVALID_ARG_TYPE, cause);\n    }\n    if (input > 0) return;\n    if (allow0) {\n      if (input !== 0) {\n        throw CodedTypeError(`${it} must be a non-negative number`, ERR_INVALID_ARG_VALUE, cause);\n      }\n      return;\n    }\n    throw CodedTypeError(`${it} must be a positive number`, ERR_INVALID_ARG_VALUE, cause);\n  } catch (err) {\n    if (code) {\n      throw OPE(err.message, code, cause);\n    }\n    throw err;\n  }\n}\nfunction assertString(input, it, code, cause) {\n  try {\n    if (typeof input !== 'string') {\n      throw CodedTypeError(`${it} must be a string`, ERR_INVALID_ARG_TYPE, cause);\n    }\n    if (input.length === 0) {\n      throw CodedTypeError(`${it} must not be empty`, ERR_INVALID_ARG_VALUE, cause);\n    }\n  } catch (err) {\n    if (code) {\n      throw OPE(err.message, code, cause);\n    }\n    throw err;\n  }\n}\nasync function processDiscoveryResponse(expectedIssuerIdentifier, response) {\n  const expected = expectedIssuerIdentifier;\n  if (!(expected instanceof URL) && expected !== _nodiscoverycheck) {\n    throw CodedTypeError('\"expectedIssuerIdentifier\" must be an instance of URL', ERR_INVALID_ARG_TYPE);\n  }\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  if (response.status !== 200) {\n    throw OPE('\"response\" is not a conform Authorization Server Metadata response (unexpected HTTP status code)', RESPONSE_IS_NOT_CONFORM, response);\n  }\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.issuer, '\"response\" body \"issuer\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  if (expected !== _nodiscoverycheck && new URL(json.issuer).href !== expected.href) {\n    throw OPE('\"response\" body \"issuer\" property does not match the expected value', JSON_ATTRIBUTE_COMPARISON, {\n      expected: expected.href,\n      body: json,\n      attribute: 'issuer'\n    });\n  }\n  return json;\n}\nfunction assertApplicationJson(response) {\n  assertContentType(response, 'application/json');\n}\nfunction notJson(response, ...types) {\n  let msg = '\"response\" content-type must be ';\n  if (types.length > 2) {\n    const last = types.pop();\n    msg += `${types.join(', ')}, or ${last}`;\n  } else if (types.length === 2) {\n    msg += `${types[0]} or ${types[1]}`;\n  } else {\n    msg += types[0];\n  }\n  return OPE(msg, RESPONSE_IS_NOT_JSON, response);\n}\nfunction assertContentTypes(response, ...types) {\n  if (!types.includes(getContentType(response))) {\n    throw notJson(response, ...types);\n  }\n}\nfunction assertContentType(response, contentType) {\n  if (getContentType(response) !== contentType) {\n    throw notJson(response, contentType);\n  }\n}\nfunction randomBytes() {\n  return b64u(crypto.getRandomValues(new Uint8Array(32)));\n}\nfunction generateRandomCodeVerifier() {\n  return randomBytes();\n}\nfunction generateRandomState() {\n  return randomBytes();\n}\nfunction generateRandomNonce() {\n  return randomBytes();\n}\nasync function calculatePKCECodeChallenge(codeVerifier) {\n  assertString(codeVerifier, 'codeVerifier');\n  return b64u(await crypto.subtle.digest('SHA-256', buf(codeVerifier)));\n}\nfunction getKeyAndKid(input) {\n  if (input instanceof CryptoKey) {\n    return {\n      key: input\n    };\n  }\n  if (!(input?.key instanceof CryptoKey)) {\n    return {};\n  }\n  if (input.kid !== undefined) {\n    assertString(input.kid, '\"kid\"');\n  }\n  return {\n    key: input.key,\n    kid: input.kid\n  };\n}\nfunction psAlg(key) {\n  switch (key.algorithm.hash.name) {\n    case 'SHA-256':\n      return 'PS256';\n    case 'SHA-384':\n      return 'PS384';\n    case 'SHA-512':\n      return 'PS512';\n    default:\n      throw new UnsupportedOperationError('unsupported RsaHashedKeyAlgorithm hash name', {\n        cause: key\n      });\n  }\n}\nfunction rsAlg(key) {\n  switch (key.algorithm.hash.name) {\n    case 'SHA-256':\n      return 'RS256';\n    case 'SHA-384':\n      return 'RS384';\n    case 'SHA-512':\n      return 'RS512';\n    default:\n      throw new UnsupportedOperationError('unsupported RsaHashedKeyAlgorithm hash name', {\n        cause: key\n      });\n  }\n}\nfunction esAlg(key) {\n  switch (key.algorithm.namedCurve) {\n    case 'P-256':\n      return 'ES256';\n    case 'P-384':\n      return 'ES384';\n    case 'P-521':\n      return 'ES512';\n    default:\n      throw new UnsupportedOperationError('unsupported EcKeyAlgorithm namedCurve', {\n        cause: key\n      });\n  }\n}\nfunction keyToJws(key) {\n  switch (key.algorithm.name) {\n    case 'RSA-PSS':\n      return psAlg(key);\n    case 'RSASSA-PKCS1-v1_5':\n      return rsAlg(key);\n    case 'ECDSA':\n      return esAlg(key);\n    case 'Ed25519':\n    case 'EdDSA':\n      return 'Ed25519';\n    default:\n      throw new UnsupportedOperationError('unsupported CryptoKey algorithm name', {\n        cause: key\n      });\n  }\n}\nfunction getClockSkew(client) {\n  const skew = client?.[clockSkew];\n  return typeof skew === 'number' && Number.isFinite(skew) ? skew : 0;\n}\nfunction getClockTolerance(client) {\n  const tolerance = client?.[clockTolerance];\n  return typeof tolerance === 'number' && Number.isFinite(tolerance) && Math.sign(tolerance) !== -1 ? tolerance : 30;\n}\nfunction epochTime() {\n  return Math.floor(Date.now() / 1000);\n}\nfunction assertAs(as) {\n  if (typeof as !== 'object' || as === null) {\n    throw CodedTypeError('\"as\" must be an object', ERR_INVALID_ARG_TYPE);\n  }\n  assertString(as.issuer, '\"as.issuer\"');\n}\nfunction assertClient(client) {\n  if (typeof client !== 'object' || client === null) {\n    throw CodedTypeError('\"client\" must be an object', ERR_INVALID_ARG_TYPE);\n  }\n  assertString(client.client_id, '\"client.client_id\"');\n}\nfunction formUrlEncode(token) {\n  return encodeURIComponent(token).replace(/(?:[-_.!~*'()]|%20)/g, substring => {\n    switch (substring) {\n      case '-':\n      case '_':\n      case '.':\n      case '!':\n      case '~':\n      case '*':\n      case \"'\":\n      case '(':\n      case ')':\n        return `%${substring.charCodeAt(0).toString(16).toUpperCase()}`;\n      case '%20':\n        return '+';\n      default:\n        throw new Error();\n    }\n  });\n}\nfunction ClientSecretPost(clientSecret) {\n  assertString(clientSecret, '\"clientSecret\"');\n  return (_as, client, body, _headers) => {\n    body.set('client_id', client.client_id);\n    body.set('client_secret', clientSecret);\n  };\n}\nfunction ClientSecretBasic(clientSecret) {\n  assertString(clientSecret, '\"clientSecret\"');\n  return (_as, client, _body, headers) => {\n    const username = formUrlEncode(client.client_id);\n    const password = formUrlEncode(clientSecret);\n    const credentials = btoa(`${username}:${password}`);\n    headers.set('authorization', `Basic ${credentials}`);\n  };\n}\nfunction clientAssertionPayload(as, client) {\n  const now = epochTime() + getClockSkew(client);\n  return {\n    jti: randomBytes(),\n    aud: as.issuer,\n    exp: now + 60,\n    iat: now,\n    nbf: now,\n    iss: client.client_id,\n    sub: client.client_id\n  };\n}\nfunction PrivateKeyJwt(clientPrivateKey, options) {\n  const {\n    key,\n    kid\n  } = getKeyAndKid(clientPrivateKey);\n  assertPrivateKey(key, '\"clientPrivateKey.key\"');\n  return async (as, client, body, _headers) => {\n    const header = {\n      alg: keyToJws(key),\n      kid\n    };\n    const payload = clientAssertionPayload(as, client);\n    options?.[modifyAssertion]?.(header, payload);\n    body.set('client_id', client.client_id);\n    body.set('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer');\n    body.set('client_assertion', await signJwt(header, payload, key));\n  };\n}\nfunction ClientSecretJwt(clientSecret, options) {\n  assertString(clientSecret, '\"clientSecret\"');\n  const modify = options?.[modifyAssertion];\n  let key;\n  return async (as, client, body, _headers) => {\n    key ||= await crypto.subtle.importKey('raw', buf(clientSecret), {\n      hash: 'SHA-256',\n      name: 'HMAC'\n    }, false, ['sign']);\n    const header = {\n      alg: 'HS256'\n    };\n    const payload = clientAssertionPayload(as, client);\n    modify?.(header, payload);\n    const data = `${b64u(buf(JSON.stringify(header)))}.${b64u(buf(JSON.stringify(payload)))}`;\n    const hmac = await crypto.subtle.sign(key.algorithm, key, buf(data));\n    body.set('client_id', client.client_id);\n    body.set('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer');\n    body.set('client_assertion', `${data}.${b64u(new Uint8Array(hmac))}`);\n  };\n}\nfunction None() {\n  return (_as, client, body, _headers) => {\n    body.set('client_id', client.client_id);\n  };\n}\nfunction TlsClientAuth() {\n  return None();\n}\nasync function signJwt(header, payload, key) {\n  if (!key.usages.includes('sign')) {\n    throw CodedTypeError('CryptoKey instances used for signing assertions must include \"sign\" in their \"usages\"', ERR_INVALID_ARG_VALUE);\n  }\n  const input = `${b64u(buf(JSON.stringify(header)))}.${b64u(buf(JSON.stringify(payload)))}`;\n  const signature = b64u(await crypto.subtle.sign(keyToSubtle(key), key, buf(input)));\n  return `${input}.${signature}`;\n}\nasync function issueRequestObject(as, client, parameters, privateKey, options) {\n  assertAs(as);\n  assertClient(client);\n  parameters = new URLSearchParams(parameters);\n  const {\n    key,\n    kid\n  } = getKeyAndKid(privateKey);\n  assertPrivateKey(key, '\"privateKey.key\"');\n  parameters.set('client_id', client.client_id);\n  const now = epochTime() + getClockSkew(client);\n  const claims = _objectSpread(_objectSpread({}, Object.fromEntries(parameters.entries())), {}, {\n    jti: randomBytes(),\n    aud: as.issuer,\n    exp: now + 60,\n    iat: now,\n    nbf: now,\n    iss: client.client_id\n  });\n  let resource;\n  if (parameters.has('resource') && (resource = parameters.getAll('resource')) && resource.length > 1) {\n    claims.resource = resource;\n  }\n  {\n    let value = parameters.get('max_age');\n    if (value !== null) {\n      claims.max_age = parseInt(value, 10);\n      assertNumber(claims.max_age, true, '\"max_age\" parameter');\n    }\n  }\n  {\n    let value = parameters.get('claims');\n    if (value !== null) {\n      try {\n        claims.claims = JSON.parse(value);\n      } catch (cause) {\n        throw OPE('failed to parse the \"claims\" parameter as JSON', PARSE_ERROR, cause);\n      }\n      if (!isJsonObject(claims.claims)) {\n        throw CodedTypeError('\"claims\" parameter must be a JSON with a top level object', ERR_INVALID_ARG_VALUE);\n      }\n    }\n  }\n  {\n    let value = parameters.get('authorization_details');\n    if (value !== null) {\n      try {\n        claims.authorization_details = JSON.parse(value);\n      } catch (cause) {\n        throw OPE('failed to parse the \"authorization_details\" parameter as JSON', PARSE_ERROR, cause);\n      }\n      if (!Array.isArray(claims.authorization_details)) {\n        throw CodedTypeError('\"authorization_details\" parameter must be a JSON with a top level array', ERR_INVALID_ARG_VALUE);\n      }\n    }\n  }\n  const header = {\n    alg: keyToJws(key),\n    typ: 'oauth-authz-req+jwt',\n    kid\n  };\n  options?.[modifyAssertion]?.(header, claims);\n  return signJwt(header, claims, key);\n}\nlet jwkCache;\nasync function getSetPublicJwkCache(key) {\n  const {\n    kty,\n    e,\n    n,\n    x,\n    y,\n    crv\n  } = await crypto.subtle.exportKey('jwk', key);\n  const jwk = {\n    kty,\n    e,\n    n,\n    x,\n    y,\n    crv\n  };\n  jwkCache.set(key, jwk);\n  return jwk;\n}\nasync function publicJwk(key) {\n  jwkCache ||= new WeakMap();\n  return jwkCache.get(key) || getSetPublicJwkCache(key);\n}\nconst URLParse = URL.parse ? (url, base) => URL.parse(url, base) : (url, base) => {\n  try {\n    return new URL(url, base);\n  } catch {\n    return null;\n  }\n};\nfunction checkProtocol(url, enforceHttps) {\n  if (enforceHttps && url.protocol !== 'https:') {\n    throw OPE('only requests to HTTPS are allowed', HTTP_REQUEST_FORBIDDEN, url);\n  }\n  if (url.protocol !== 'https:' && url.protocol !== 'http:') {\n    throw OPE('only HTTP and HTTPS requests are allowed', REQUEST_PROTOCOL_FORBIDDEN, url);\n  }\n}\nfunction validateEndpoint(value, endpoint, useMtlsAlias, enforceHttps) {\n  let url;\n  if (typeof value !== 'string' || !(url = URLParse(value))) {\n    throw OPE(`authorization server metadata does not contain a valid ${useMtlsAlias ? `\"as.mtls_endpoint_aliases.${endpoint}\"` : `\"as.${endpoint}\"`}`, value === undefined ? MISSING_SERVER_METADATA : INVALID_SERVER_METADATA, {\n      attribute: useMtlsAlias ? `mtls_endpoint_aliases.${endpoint}` : endpoint\n    });\n  }\n  checkProtocol(url, enforceHttps);\n  return url;\n}\nfunction resolveEndpoint(as, endpoint, useMtlsAlias, enforceHttps) {\n  if (useMtlsAlias && as.mtls_endpoint_aliases && endpoint in as.mtls_endpoint_aliases) {\n    return validateEndpoint(as.mtls_endpoint_aliases[endpoint], endpoint, useMtlsAlias, enforceHttps);\n  }\n  return validateEndpoint(as[endpoint], endpoint, useMtlsAlias, enforceHttps);\n}\nasync function pushedAuthorizationRequest(as, client, clientAuthentication, parameters, options) {\n  assertAs(as);\n  assertClient(client);\n  const url = resolveEndpoint(as, 'pushed_authorization_request_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const body = new URLSearchParams(parameters);\n  body.set('client_id', client.client_id);\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  if (options?.DPoP !== undefined) {\n    assertDPoP(options.DPoP);\n    await options.DPoP.addProof(url, headers, 'POST');\n  }\n  const response = await authenticatedRequest(as, client, clientAuthentication, url, body, headers, options);\n  options?.DPoP?.cacheNonce(response);\n  return response;\n}\nclass DPoPHandler {\n  #header;\n  #privateKey;\n  #publicKey;\n  #clockSkew;\n  #modifyAssertion;\n  #map;\n  #jkt;\n  constructor(client, keyPair, options) {\n    assertPrivateKey(keyPair?.privateKey, '\"DPoP.privateKey\"');\n    assertPublicKey(keyPair?.publicKey, '\"DPoP.publicKey\"');\n    if (!keyPair.publicKey.extractable) {\n      throw CodedTypeError('\"DPoP.publicKey.extractable\" must be true', ERR_INVALID_ARG_VALUE);\n    }\n    this.#modifyAssertion = options?.[modifyAssertion];\n    this.#clockSkew = getClockSkew(client);\n    this.#privateKey = keyPair.privateKey;\n    this.#publicKey = keyPair.publicKey;\n    branded.add(this);\n  }\n  #get(key) {\n    this.#map ||= new Map();\n    let item = this.#map.get(key);\n    if (item) {\n      this.#map.delete(key);\n      this.#map.set(key, item);\n    }\n    return item;\n  }\n  #set(key, val) {\n    this.#map ||= new Map();\n    this.#map.delete(key);\n    if (this.#map.size === 100) {\n      this.#map.delete(this.#map.keys().next().value);\n    }\n    this.#map.set(key, val);\n  }\n  async calculateThumbprint() {\n    if (!this.#jkt) {\n      const jwk = await crypto.subtle.exportKey('jwk', this.#publicKey);\n      let components;\n      switch (jwk.kty) {\n        case 'EC':\n          components = {\n            crv: jwk.crv,\n            kty: jwk.kty,\n            x: jwk.x,\n            y: jwk.y\n          };\n          break;\n        case 'OKP':\n          components = {\n            crv: jwk.crv,\n            kty: jwk.kty,\n            x: jwk.x\n          };\n          break;\n        case 'RSA':\n          components = {\n            e: jwk.e,\n            kty: jwk.kty,\n            n: jwk.n\n          };\n          break;\n        default:\n          throw new UnsupportedOperationError('unsupported JWK', {\n            cause: {\n              jwk\n            }\n          });\n      }\n      this.#jkt ||= b64u(await crypto.subtle.digest({\n        name: 'SHA-256'\n      }, buf(JSON.stringify(components))));\n    }\n    return this.#jkt;\n  }\n  async addProof(url, headers, htm, accessToken) {\n    this.#header ||= {\n      alg: keyToJws(this.#privateKey),\n      typ: 'dpop+jwt',\n      jwk: await publicJwk(this.#publicKey)\n    };\n    const nonce = this.#get(url.origin);\n    const now = epochTime() + this.#clockSkew;\n    const payload = {\n      iat: now,\n      jti: randomBytes(),\n      htm,\n      nonce,\n      htu: `${url.origin}${url.pathname}`,\n      ath: accessToken ? b64u(await crypto.subtle.digest('SHA-256', buf(accessToken))) : undefined\n    };\n    this.#modifyAssertion?.(this.#header, payload);\n    headers.set('dpop', await signJwt(this.#header, payload, this.#privateKey));\n  }\n  cacheNonce(response) {\n    try {\n      const nonce = response.headers.get('dpop-nonce');\n      if (nonce) {\n        this.#set(new URL(response.url).origin, nonce);\n      }\n    } catch {}\n  }\n}\nfunction isDPoPNonceError(err) {\n  if (err instanceof WWWAuthenticateChallengeError) {\n    const {\n      0: challenge,\n      length\n    } = err.cause;\n    return length === 1 && challenge.scheme === 'dpop' && challenge.parameters.error === 'use_dpop_nonce';\n  }\n  if (err instanceof ResponseBodyError) {\n    return err.error === 'use_dpop_nonce';\n  }\n  return false;\n}\nfunction DPoP(client, keyPair, options) {\n  return new DPoPHandler(client, keyPair, options);\n}\nclass ResponseBodyError extends Error {\n  cause;\n  code;\n  error;\n  status;\n  error_description;\n  response;\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    this.code = RESPONSE_BODY_ERROR;\n    this.cause = options.cause;\n    this.error = options.cause.error;\n    this.status = options.response.status;\n    this.error_description = options.cause.error_description;\n    Object.defineProperty(this, 'response', {\n      enumerable: false,\n      value: options.response\n    });\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\nclass AuthorizationResponseError extends Error {\n  cause;\n  code;\n  error;\n  error_description;\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    this.code = AUTHORIZATION_RESPONSE_ERROR;\n    this.cause = options.cause;\n    this.error = options.cause.get('error');\n    this.error_description = options.cause.get('error_description') ?? undefined;\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\nclass WWWAuthenticateChallengeError extends Error {\n  cause;\n  code;\n  response;\n  status;\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    this.code = WWW_AUTHENTICATE_CHALLENGE;\n    this.cause = options.cause;\n    this.status = options.response.status;\n    this.response = options.response;\n    Object.defineProperty(this, 'response', {\n      enumerable: false\n    });\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\nconst tokenMatch = \"[a-zA-Z0-9!#$%&\\\\'\\\\*\\\\+\\\\-\\\\.\\\\^_`\\\\|~]+\";\nconst token68Match = '[a-zA-Z0-9\\\\-\\\\._\\\\~\\\\+\\\\/]+[=]{0,2}';\nconst quotedMatch = '\"((?:[^\"\\\\\\\\]|\\\\\\\\.)*)\"';\nconst quotedParamMatcher = '(' + tokenMatch + ')\\\\s*=\\\\s*' + quotedMatch;\nconst paramMatcher = '(' + tokenMatch + ')\\\\s*=\\\\s*(' + tokenMatch + ')';\nconst schemeRE = new RegExp('^[,\\\\s]*(' + tokenMatch + ')\\\\s(.*)');\nconst quotedParamRE = new RegExp('^[,\\\\s]*' + quotedParamMatcher + '[,\\\\s]*(.*)');\nconst unquotedParamRE = new RegExp('^[,\\\\s]*' + paramMatcher + '[,\\\\s]*(.*)');\nconst token68ParamRE = new RegExp('^(' + token68Match + ')(?:$|[,\\\\s])(.*)');\nfunction parseWwwAuthenticateChallenges(response) {\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  const header = response.headers.get('www-authenticate');\n  if (header === null) {\n    return undefined;\n  }\n  const challenges = [];\n  let rest = header;\n  while (rest) {\n    let match = rest.match(schemeRE);\n    const scheme = match?.['1'].toLowerCase();\n    rest = match?.['2'];\n    if (!scheme) {\n      return undefined;\n    }\n    const parameters = {};\n    let token68;\n    while (rest) {\n      let key;\n      let value;\n      if (match = rest.match(quotedParamRE)) {\n        ;\n        [, key, value, rest] = match;\n        if (value.includes('\\\\')) {\n          try {\n            value = JSON.parse(`\"${value}\"`);\n          } catch {}\n        }\n        parameters[key.toLowerCase()] = value;\n        continue;\n      }\n      if (match = rest.match(unquotedParamRE)) {\n        ;\n        [, key, value, rest] = match;\n        parameters[key.toLowerCase()] = value;\n        continue;\n      }\n      if (match = rest.match(token68ParamRE)) {\n        if (Object.keys(parameters).length) {\n          break;\n        }\n        ;\n        [, token68, rest] = match;\n        break;\n      }\n      return undefined;\n    }\n    const challenge = {\n      scheme,\n      parameters\n    };\n    if (token68) {\n      challenge.token68 = token68;\n    }\n    challenges.push(challenge);\n  }\n  if (!challenges.length) {\n    return undefined;\n  }\n  return challenges;\n}\nasync function processPushedAuthorizationResponse(as, client, response) {\n  assertAs(as);\n  assertClient(client);\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 201, 'Pushed Authorization Request Endpoint');\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.request_uri, '\"response\" body \"request_uri\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  let expiresIn = typeof json.expires_in !== 'number' ? parseFloat(json.expires_in) : json.expires_in;\n  assertNumber(expiresIn, false, '\"response\" body \"expires_in\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  json.expires_in = expiresIn;\n  return json;\n}\nasync function parseOAuthResponseErrorBody(response) {\n  if (response.status > 399 && response.status < 500) {\n    assertReadableResponse(response);\n    assertApplicationJson(response);\n    try {\n      const json = await response.clone().json();\n      if (isJsonObject(json) && typeof json.error === 'string' && json.error.length) {\n        return json;\n      }\n    } catch {}\n  }\n  return undefined;\n}\nasync function checkOAuthBodyError(response, expected, label) {\n  if (response.status !== expected) {\n    let err;\n    if (err = await parseOAuthResponseErrorBody(response)) {\n      await response.body?.cancel();\n      throw new ResponseBodyError('server responded with an error in the response body', {\n        cause: err,\n        response\n      });\n    }\n    throw OPE(`\"response\" is not a conform ${label} response (unexpected HTTP status code)`, RESPONSE_IS_NOT_CONFORM, response);\n  }\n}\nfunction assertDPoP(option) {\n  if (!branded.has(option)) {\n    throw CodedTypeError('\"options.DPoP\" is not a valid DPoPHandle', ERR_INVALID_ARG_VALUE);\n  }\n}\nasync function resourceRequest(accessToken, method, url, headers, body, options) {\n  assertString(accessToken, '\"accessToken\"');\n  if (!(url instanceof URL)) {\n    throw CodedTypeError('\"url\" must be an instance of URL', ERR_INVALID_ARG_TYPE);\n  }\n  checkProtocol(url, options?.[allowInsecureRequests] !== true);\n  headers = prepareHeaders(headers);\n  if (options?.DPoP) {\n    assertDPoP(options.DPoP);\n    await options.DPoP.addProof(url, headers, method.toUpperCase(), accessToken);\n  }\n  headers.set('authorization', `${headers.has('dpop') ? 'DPoP' : 'Bearer'} ${accessToken}`);\n  const response = await (options?.[customFetch] || fetch)(url.href, {\n    body,\n    headers: Object.fromEntries(headers.entries()),\n    method,\n    redirect: 'manual',\n    signal: options?.signal ? signal(options.signal) : undefined\n  });\n  options?.DPoP?.cacheNonce(response);\n  return response;\n}\nasync function protectedResourceRequest(accessToken, method, url, headers, body, options) {\n  const response = await resourceRequest(accessToken, method, url, headers, body, options);\n  checkAuthenticationChallenges(response);\n  return response;\n}\nasync function userInfoRequest(as, client, accessToken, options) {\n  assertAs(as);\n  assertClient(client);\n  const url = resolveEndpoint(as, 'userinfo_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const headers = prepareHeaders(options?.headers);\n  if (client.userinfo_signed_response_alg) {\n    headers.set('accept', 'application/jwt');\n  } else {\n    headers.set('accept', 'application/json');\n    headers.append('accept', 'application/jwt');\n  }\n  return resourceRequest(accessToken, 'GET', url, headers, null, _objectSpread(_objectSpread({}, options), {}, {\n    [clockSkew]: getClockSkew(client)\n  }));\n}\nlet jwksMap;\nfunction setJwksCache(as, jwks, uat, cache) {\n  jwksMap ||= new WeakMap();\n  jwksMap.set(as, {\n    jwks,\n    uat,\n    get age() {\n      return epochTime() - this.uat;\n    }\n  });\n  if (cache) {\n    Object.assign(cache, {\n      jwks: structuredClone(jwks),\n      uat\n    });\n  }\n}\nfunction isFreshJwksCache(input) {\n  if (typeof input !== 'object' || input === null) {\n    return false;\n  }\n  if (!('uat' in input) || typeof input.uat !== 'number' || epochTime() - input.uat >= 300) {\n    return false;\n  }\n  if (!('jwks' in input) || !isJsonObject(input.jwks) || !Array.isArray(input.jwks.keys) || !Array.prototype.every.call(input.jwks.keys, isJsonObject)) {\n    return false;\n  }\n  return true;\n}\nfunction clearJwksCache(as, cache) {\n  jwksMap?.delete(as);\n  delete cache?.jwks;\n  delete cache?.uat;\n}\nasync function getPublicSigKeyFromIssuerJwksUri(as, options, header) {\n  const {\n    alg,\n    kid\n  } = header;\n  checkSupportedJwsAlg(header);\n  if (!jwksMap?.has(as) && isFreshJwksCache(options?.[jwksCache])) {\n    setJwksCache(as, options?.[jwksCache].jwks, options?.[jwksCache].uat);\n  }\n  let jwks;\n  let age;\n  if (jwksMap?.has(as)) {\n    ;\n    ({\n      jwks,\n      age\n    } = jwksMap.get(as));\n    if (age >= 300) {\n      clearJwksCache(as, options?.[jwksCache]);\n      return getPublicSigKeyFromIssuerJwksUri(as, options, header);\n    }\n  } else {\n    jwks = await jwksRequest(as, options).then(processJwksResponse);\n    age = 0;\n    setJwksCache(as, jwks, epochTime(), options?.[jwksCache]);\n  }\n  let kty;\n  switch (alg.slice(0, 2)) {\n    case 'RS':\n    case 'PS':\n      kty = 'RSA';\n      break;\n    case 'ES':\n      kty = 'EC';\n      break;\n    case 'Ed':\n      kty = 'OKP';\n      break;\n    default:\n      throw new UnsupportedOperationError('unsupported JWS algorithm', {\n        cause: {\n          alg\n        }\n      });\n  }\n  const candidates = jwks.keys.filter(jwk => {\n    if (jwk.kty !== kty) {\n      return false;\n    }\n    if (kid !== undefined && kid !== jwk.kid) {\n      return false;\n    }\n    if (jwk.alg !== undefined && alg !== jwk.alg) {\n      return false;\n    }\n    if (jwk.use !== undefined && jwk.use !== 'sig') {\n      return false;\n    }\n    if (jwk.key_ops?.includes('verify') === false) {\n      return false;\n    }\n    switch (true) {\n      case alg === 'ES256' && jwk.crv !== 'P-256':\n      case alg === 'ES384' && jwk.crv !== 'P-384':\n      case alg === 'ES512' && jwk.crv !== 'P-521':\n      case alg === 'Ed25519' && jwk.crv !== 'Ed25519':\n      case alg === 'EdDSA' && jwk.crv !== 'Ed25519':\n        return false;\n    }\n    return true;\n  });\n  const {\n    0: jwk,\n    length\n  } = candidates;\n  if (!length) {\n    if (age >= 60) {\n      clearJwksCache(as, options?.[jwksCache]);\n      return getPublicSigKeyFromIssuerJwksUri(as, options, header);\n    }\n    throw OPE('error when selecting a JWT verification key, no applicable keys found', KEY_SELECTION, {\n      header,\n      candidates,\n      jwks_uri: new URL(as.jwks_uri)\n    });\n  }\n  if (length !== 1) {\n    throw OPE('error when selecting a JWT verification key, multiple applicable keys found, a \"kid\" JWT Header Parameter is required', KEY_SELECTION, {\n      header,\n      candidates,\n      jwks_uri: new URL(as.jwks_uri)\n    });\n  }\n  return importJwk(alg, jwk);\n}\nconst skipSubjectCheck = Symbol();\nfunction getContentType(input) {\n  return input.headers.get('content-type')?.split(';')[0];\n}\nasync function processUserInfoResponse(as, client, expectedSubject, response, options) {\n  assertAs(as);\n  assertClient(client);\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  if (response.status !== 200) {\n    throw OPE('\"response\" is not a conform UserInfo Endpoint response (unexpected HTTP status code)', RESPONSE_IS_NOT_CONFORM, response);\n  }\n  assertReadableResponse(response);\n  let json;\n  if (getContentType(response) === 'application/jwt') {\n    const {\n      claims,\n      jwt\n    } = await validateJwt(await response.text(), checkSigningAlgorithm.bind(undefined, client.userinfo_signed_response_alg, as.userinfo_signing_alg_values_supported, undefined), getClockSkew(client), getClockTolerance(client), options?.[jweDecrypt]).then(validateOptionalAudience.bind(undefined, client.client_id)).then(validateOptionalIssuer.bind(undefined, as));\n    jwtRefs.set(response, jwt);\n    json = claims;\n  } else {\n    if (client.userinfo_signed_response_alg) {\n      throw OPE('JWT UserInfo Response expected', JWT_USERINFO_EXPECTED, response);\n    }\n    json = await getResponseJsonBody(response);\n  }\n  assertString(json.sub, '\"response\" body \"sub\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  switch (expectedSubject) {\n    case skipSubjectCheck:\n      break;\n    default:\n      assertString(expectedSubject, '\"expectedSubject\"');\n      if (json.sub !== expectedSubject) {\n        throw OPE('unexpected \"response\" body \"sub\" property value', JSON_ATTRIBUTE_COMPARISON, {\n          expected: expectedSubject,\n          body: json,\n          attribute: 'sub'\n        });\n      }\n  }\n  return json;\n}\nasync function authenticatedRequest(as, client, clientAuthentication, url, body, headers, options) {\n  await clientAuthentication(as, client, body, headers);\n  headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n  return (options?.[customFetch] || fetch)(url.href, {\n    body,\n    headers: Object.fromEntries(headers.entries()),\n    method: 'POST',\n    redirect: 'manual',\n    signal: options?.signal ? signal(options.signal) : undefined\n  });\n}\nasync function tokenEndpointRequest(as, client, clientAuthentication, grantType, parameters, options) {\n  const url = resolveEndpoint(as, 'token_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  parameters.set('grant_type', grantType);\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  if (options?.DPoP !== undefined) {\n    assertDPoP(options.DPoP);\n    await options.DPoP.addProof(url, headers, 'POST');\n  }\n  const response = await authenticatedRequest(as, client, clientAuthentication, url, parameters, headers, options);\n  options?.DPoP?.cacheNonce(response);\n  return response;\n}\nasync function refreshTokenGrantRequest(as, client, clientAuthentication, refreshToken, options) {\n  assertAs(as);\n  assertClient(client);\n  assertString(refreshToken, '\"refreshToken\"');\n  const parameters = new URLSearchParams(options?.additionalParameters);\n  parameters.set('refresh_token', refreshToken);\n  return tokenEndpointRequest(as, client, clientAuthentication, 'refresh_token', parameters, options);\n}\nconst idTokenClaims = new WeakMap();\nconst jwtRefs = new WeakMap();\nfunction getValidatedIdTokenClaims(ref) {\n  if (!ref.id_token) {\n    return undefined;\n  }\n  const claims = idTokenClaims.get(ref);\n  if (!claims) {\n    throw CodedTypeError('\"ref\" was already garbage collected or did not resolve from the proper sources', ERR_INVALID_ARG_VALUE);\n  }\n  return claims;\n}\nasync function validateApplicationLevelSignature(as, ref, options) {\n  assertAs(as);\n  if (!jwtRefs.has(ref)) {\n    throw CodedTypeError('\"ref\" does not contain a processed JWT Response to verify the signature of', ERR_INVALID_ARG_VALUE);\n  }\n  const {\n    0: protectedHeader,\n    1: payload,\n    2: encodedSignature\n  } = jwtRefs.get(ref).split('.');\n  const header = JSON.parse(buf(b64u(protectedHeader)));\n  if (header.alg.startsWith('HS')) {\n    throw new UnsupportedOperationError('unsupported JWS algorithm', {\n      cause: {\n        alg: header.alg\n      }\n    });\n  }\n  let key;\n  key = await getPublicSigKeyFromIssuerJwksUri(as, options, header);\n  await validateJwsSignature(protectedHeader, payload, key, b64u(encodedSignature));\n}\nasync function processGenericAccessTokenResponse(as, client, response, additionalRequiredIdTokenClaims, options) {\n  assertAs(as);\n  assertClient(client);\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 200, 'Token Endpoint');\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.access_token, '\"response\" body \"access_token\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  assertString(json.token_type, '\"response\" body \"token_type\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  json.token_type = json.token_type.toLowerCase();\n  if (json.token_type !== 'dpop' && json.token_type !== 'bearer') {\n    throw new UnsupportedOperationError('unsupported `token_type` value', {\n      cause: {\n        body: json\n      }\n    });\n  }\n  if (json.expires_in !== undefined) {\n    let expiresIn = typeof json.expires_in !== 'number' ? parseFloat(json.expires_in) : json.expires_in;\n    assertNumber(expiresIn, false, '\"response\" body \"expires_in\" property', INVALID_RESPONSE, {\n      body: json\n    });\n    json.expires_in = expiresIn;\n  }\n  if (json.refresh_token !== undefined) {\n    assertString(json.refresh_token, '\"response\" body \"refresh_token\" property', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  if (json.scope !== undefined && typeof json.scope !== 'string') {\n    throw OPE('\"response\" body \"scope\" property must be a string', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  if (json.id_token !== undefined) {\n    assertString(json.id_token, '\"response\" body \"id_token\" property', INVALID_RESPONSE, {\n      body: json\n    });\n    const requiredClaims = ['aud', 'exp', 'iat', 'iss', 'sub'];\n    if (client.require_auth_time === true) {\n      requiredClaims.push('auth_time');\n    }\n    if (client.default_max_age !== undefined) {\n      assertNumber(client.default_max_age, false, '\"client.default_max_age\"');\n      requiredClaims.push('auth_time');\n    }\n    if (additionalRequiredIdTokenClaims?.length) {\n      requiredClaims.push(...additionalRequiredIdTokenClaims);\n    }\n    const {\n      claims,\n      jwt\n    } = await validateJwt(json.id_token, checkSigningAlgorithm.bind(undefined, client.id_token_signed_response_alg, as.id_token_signing_alg_values_supported, 'RS256'), getClockSkew(client), getClockTolerance(client), options?.[jweDecrypt]).then(validatePresence.bind(undefined, requiredClaims)).then(validateIssuer.bind(undefined, as)).then(validateAudience.bind(undefined, client.client_id));\n    if (Array.isArray(claims.aud) && claims.aud.length !== 1) {\n      if (claims.azp === undefined) {\n        throw OPE('ID Token \"aud\" (audience) claim includes additional untrusted audiences', JWT_CLAIM_COMPARISON, {\n          claims,\n          claim: 'aud'\n        });\n      }\n      if (claims.azp !== client.client_id) {\n        throw OPE('unexpected ID Token \"azp\" (authorized party) claim value', JWT_CLAIM_COMPARISON, {\n          expected: client.client_id,\n          claims,\n          claim: 'azp'\n        });\n      }\n    }\n    if (claims.auth_time !== undefined) {\n      assertNumber(claims.auth_time, false, 'ID Token \"auth_time\" (authentication time)', INVALID_RESPONSE, {\n        claims\n      });\n    }\n    jwtRefs.set(response, jwt);\n    idTokenClaims.set(json, claims);\n  }\n  return json;\n}\nfunction checkAuthenticationChallenges(response) {\n  let challenges;\n  if (challenges = parseWwwAuthenticateChallenges(response)) {\n    throw new WWWAuthenticateChallengeError('server responded with a challenge in the WWW-Authenticate HTTP Header', {\n      cause: challenges,\n      response\n    });\n  }\n}\nasync function processRefreshTokenResponse(as, client, response, options) {\n  return processGenericAccessTokenResponse(as, client, response, undefined, options);\n}\nfunction validateOptionalAudience(expected, result) {\n  if (result.claims.aud !== undefined) {\n    return validateAudience(expected, result);\n  }\n  return result;\n}\nfunction validateAudience(expected, result) {\n  if (Array.isArray(result.claims.aud)) {\n    if (!result.claims.aud.includes(expected)) {\n      throw OPE('unexpected JWT \"aud\" (audience) claim value', JWT_CLAIM_COMPARISON, {\n        expected,\n        claims: result.claims,\n        claim: 'aud'\n      });\n    }\n  } else if (result.claims.aud !== expected) {\n    throw OPE('unexpected JWT \"aud\" (audience) claim value', JWT_CLAIM_COMPARISON, {\n      expected,\n      claims: result.claims,\n      claim: 'aud'\n    });\n  }\n  return result;\n}\nfunction validateOptionalIssuer(as, result) {\n  if (result.claims.iss !== undefined) {\n    return validateIssuer(as, result);\n  }\n  return result;\n}\nfunction validateIssuer(as, result) {\n  const expected = as[_expectedIssuer]?.(result) ?? as.issuer;\n  if (result.claims.iss !== expected) {\n    throw OPE('unexpected JWT \"iss\" (issuer) claim value', JWT_CLAIM_COMPARISON, {\n      expected,\n      claims: result.claims,\n      claim: 'iss'\n    });\n  }\n  return result;\n}\nconst branded = new WeakSet();\nfunction brand(searchParams) {\n  branded.add(searchParams);\n  return searchParams;\n}\nasync function authorizationCodeGrantRequest(as, client, clientAuthentication, callbackParameters, redirectUri, codeVerifier, options) {\n  assertAs(as);\n  assertClient(client);\n  if (!branded.has(callbackParameters)) {\n    throw CodedTypeError('\"callbackParameters\" must be an instance of URLSearchParams obtained from \"validateAuthResponse()\", or \"validateJwtAuthResponse()', ERR_INVALID_ARG_VALUE);\n  }\n  assertString(redirectUri, '\"redirectUri\"');\n  const code = getURLSearchParameter(callbackParameters, 'code');\n  if (!code) {\n    throw OPE('no authorization code in \"callbackParameters\"', INVALID_RESPONSE);\n  }\n  const parameters = new URLSearchParams(options?.additionalParameters);\n  parameters.set('redirect_uri', redirectUri);\n  parameters.set('code', code);\n  if (codeVerifier !== _nopkce) {\n    assertString(codeVerifier, '\"codeVerifier\"');\n    parameters.set('code_verifier', codeVerifier);\n  }\n  return tokenEndpointRequest(as, client, clientAuthentication, 'authorization_code', parameters, options);\n}\nconst jwtClaimNames = {\n  aud: 'audience',\n  c_hash: 'code hash',\n  client_id: 'client id',\n  exp: 'expiration time',\n  iat: 'issued at',\n  iss: 'issuer',\n  jti: 'jwt id',\n  nonce: 'nonce',\n  s_hash: 'state hash',\n  sub: 'subject',\n  ath: 'access token hash',\n  htm: 'http method',\n  htu: 'http uri',\n  cnf: 'confirmation',\n  auth_time: 'authentication time'\n};\nfunction validatePresence(required, result) {\n  for (const claim of required) {\n    if (result.claims[claim] === undefined) {\n      throw OPE(`JWT \"${claim}\" (${jwtClaimNames[claim]}) claim missing`, INVALID_RESPONSE, {\n        claims: result.claims\n      });\n    }\n  }\n  return result;\n}\nconst expectNoNonce = Symbol();\nconst skipAuthTimeCheck = Symbol();\nasync function processAuthorizationCodeResponse(as, client, response, options) {\n  if (typeof options?.expectedNonce === 'string' || typeof options?.maxAge === 'number' || options?.requireIdToken) {\n    return processAuthorizationCodeOpenIDResponse(as, client, response, options.expectedNonce, options.maxAge, {\n      [jweDecrypt]: options[jweDecrypt]\n    });\n  }\n  return processAuthorizationCodeOAuth2Response(as, client, response, options);\n}\nasync function processAuthorizationCodeOpenIDResponse(as, client, response, expectedNonce, maxAge, options) {\n  const additionalRequiredClaims = [];\n  switch (expectedNonce) {\n    case undefined:\n      expectedNonce = expectNoNonce;\n      break;\n    case expectNoNonce:\n      break;\n    default:\n      assertString(expectedNonce, '\"expectedNonce\" argument');\n      additionalRequiredClaims.push('nonce');\n  }\n  maxAge ??= client.default_max_age;\n  switch (maxAge) {\n    case undefined:\n      maxAge = skipAuthTimeCheck;\n      break;\n    case skipAuthTimeCheck:\n      break;\n    default:\n      assertNumber(maxAge, false, '\"maxAge\" argument');\n      additionalRequiredClaims.push('auth_time');\n  }\n  const result = await processGenericAccessTokenResponse(as, client, response, additionalRequiredClaims, options);\n  assertString(result.id_token, '\"response\" body \"id_token\" property', INVALID_RESPONSE, {\n    body: result\n  });\n  const claims = getValidatedIdTokenClaims(result);\n  if (maxAge !== skipAuthTimeCheck) {\n    const now = epochTime() + getClockSkew(client);\n    const tolerance = getClockTolerance(client);\n    if (claims.auth_time + maxAge < now - tolerance) {\n      throw OPE('too much time has elapsed since the last End-User authentication', JWT_TIMESTAMP_CHECK, {\n        claims,\n        now,\n        tolerance,\n        claim: 'auth_time'\n      });\n    }\n  }\n  if (expectedNonce === expectNoNonce) {\n    if (claims.nonce !== undefined) {\n      throw OPE('unexpected ID Token \"nonce\" claim value', JWT_CLAIM_COMPARISON, {\n        expected: undefined,\n        claims,\n        claim: 'nonce'\n      });\n    }\n  } else if (claims.nonce !== expectedNonce) {\n    throw OPE('unexpected ID Token \"nonce\" claim value', JWT_CLAIM_COMPARISON, {\n      expected: expectedNonce,\n      claims,\n      claim: 'nonce'\n    });\n  }\n  return result;\n}\nasync function processAuthorizationCodeOAuth2Response(as, client, response, options) {\n  const result = await processGenericAccessTokenResponse(as, client, response, undefined, options);\n  const claims = getValidatedIdTokenClaims(result);\n  if (claims) {\n    if (client.default_max_age !== undefined) {\n      assertNumber(client.default_max_age, false, '\"client.default_max_age\"');\n      const now = epochTime() + getClockSkew(client);\n      const tolerance = getClockTolerance(client);\n      if (claims.auth_time + client.default_max_age < now - tolerance) {\n        throw OPE('too much time has elapsed since the last End-User authentication', JWT_TIMESTAMP_CHECK, {\n          claims,\n          now,\n          tolerance,\n          claim: 'auth_time'\n        });\n      }\n    }\n    if (claims.nonce !== undefined) {\n      throw OPE('unexpected ID Token \"nonce\" claim value', JWT_CLAIM_COMPARISON, {\n        expected: undefined,\n        claims,\n        claim: 'nonce'\n      });\n    }\n  }\n  return result;\n}\nconst WWW_AUTHENTICATE_CHALLENGE = 'OAUTH_WWW_AUTHENTICATE_CHALLENGE';\nconst RESPONSE_BODY_ERROR = 'OAUTH_RESPONSE_BODY_ERROR';\nconst UNSUPPORTED_OPERATION = 'OAUTH_UNSUPPORTED_OPERATION';\nconst AUTHORIZATION_RESPONSE_ERROR = 'OAUTH_AUTHORIZATION_RESPONSE_ERROR';\nconst JWT_USERINFO_EXPECTED = 'OAUTH_JWT_USERINFO_EXPECTED';\nconst PARSE_ERROR = 'OAUTH_PARSE_ERROR';\nconst INVALID_RESPONSE = 'OAUTH_INVALID_RESPONSE';\nconst INVALID_REQUEST = 'OAUTH_INVALID_REQUEST';\nconst RESPONSE_IS_NOT_JSON = 'OAUTH_RESPONSE_IS_NOT_JSON';\nconst RESPONSE_IS_NOT_CONFORM = 'OAUTH_RESPONSE_IS_NOT_CONFORM';\nconst HTTP_REQUEST_FORBIDDEN = 'OAUTH_HTTP_REQUEST_FORBIDDEN';\nconst REQUEST_PROTOCOL_FORBIDDEN = 'OAUTH_REQUEST_PROTOCOL_FORBIDDEN';\nconst JWT_TIMESTAMP_CHECK = 'OAUTH_JWT_TIMESTAMP_CHECK_FAILED';\nconst JWT_CLAIM_COMPARISON = 'OAUTH_JWT_CLAIM_COMPARISON_FAILED';\nconst JSON_ATTRIBUTE_COMPARISON = 'OAUTH_JSON_ATTRIBUTE_COMPARISON_FAILED';\nconst KEY_SELECTION = 'OAUTH_KEY_SELECTION_FAILED';\nconst MISSING_SERVER_METADATA = 'OAUTH_MISSING_SERVER_METADATA';\nconst INVALID_SERVER_METADATA = 'OAUTH_INVALID_SERVER_METADATA';\nfunction checkJwtType(expected, result) {\n  if (typeof result.header.typ !== 'string' || normalizeTyp(result.header.typ) !== expected) {\n    throw OPE('unexpected JWT \"typ\" header parameter value', INVALID_RESPONSE, {\n      header: result.header\n    });\n  }\n  return result;\n}\nasync function clientCredentialsGrantRequest(as, client, clientAuthentication, parameters, options) {\n  assertAs(as);\n  assertClient(client);\n  return tokenEndpointRequest(as, client, clientAuthentication, 'client_credentials', new URLSearchParams(parameters), options);\n}\nasync function genericTokenEndpointRequest(as, client, clientAuthentication, grantType, parameters, options) {\n  assertAs(as);\n  assertClient(client);\n  assertString(grantType, '\"grantType\"');\n  return tokenEndpointRequest(as, client, clientAuthentication, grantType, new URLSearchParams(parameters), options);\n}\nasync function processGenericTokenEndpointResponse(as, client, response, options) {\n  return processGenericAccessTokenResponse(as, client, response, undefined, options);\n}\nasync function processClientCredentialsResponse(as, client, response, options) {\n  return processGenericAccessTokenResponse(as, client, response, undefined, options);\n}\nasync function revocationRequest(as, client, clientAuthentication, token, options) {\n  assertAs(as);\n  assertClient(client);\n  assertString(token, '\"token\"');\n  const url = resolveEndpoint(as, 'revocation_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const body = new URLSearchParams(options?.additionalParameters);\n  body.set('token', token);\n  const headers = prepareHeaders(options?.headers);\n  headers.delete('accept');\n  return authenticatedRequest(as, client, clientAuthentication, url, body, headers, options);\n}\nasync function processRevocationResponse(response) {\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 200, 'Revocation Endpoint');\n  return undefined;\n}\nfunction assertReadableResponse(response) {\n  if (response.bodyUsed) {\n    throw CodedTypeError('\"response\" body has been used already', ERR_INVALID_ARG_VALUE);\n  }\n}\nasync function introspectionRequest(as, client, clientAuthentication, token, options) {\n  assertAs(as);\n  assertClient(client);\n  assertString(token, '\"token\"');\n  const url = resolveEndpoint(as, 'introspection_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const body = new URLSearchParams(options?.additionalParameters);\n  body.set('token', token);\n  const headers = prepareHeaders(options?.headers);\n  if (options?.requestJwtResponse ?? client.introspection_signed_response_alg) {\n    headers.set('accept', 'application/token-introspection+jwt');\n  } else {\n    headers.set('accept', 'application/json');\n  }\n  return authenticatedRequest(as, client, clientAuthentication, url, body, headers, options);\n}\nasync function processIntrospectionResponse(as, client, response, options) {\n  assertAs(as);\n  assertClient(client);\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 200, 'Introspection Endpoint');\n  let json;\n  if (getContentType(response) === 'application/token-introspection+jwt') {\n    assertReadableResponse(response);\n    const {\n      claims,\n      jwt\n    } = await validateJwt(await response.text(), checkSigningAlgorithm.bind(undefined, client.introspection_signed_response_alg, as.introspection_signing_alg_values_supported, 'RS256'), getClockSkew(client), getClockTolerance(client), options?.[jweDecrypt]).then(checkJwtType.bind(undefined, 'token-introspection+jwt')).then(validatePresence.bind(undefined, ['aud', 'iat', 'iss'])).then(validateIssuer.bind(undefined, as)).then(validateAudience.bind(undefined, client.client_id));\n    jwtRefs.set(response, jwt);\n    if (!isJsonObject(claims.token_introspection)) {\n      throw OPE('JWT \"token_introspection\" claim must be a JSON object', INVALID_RESPONSE, {\n        claims\n      });\n    }\n    json = claims.token_introspection;\n  } else {\n    assertReadableResponse(response);\n    json = await getResponseJsonBody(response);\n  }\n  if (typeof json.active !== 'boolean') {\n    throw OPE('\"response\" body \"active\" property must be a boolean', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  return json;\n}\nasync function jwksRequest(as, options) {\n  assertAs(as);\n  const url = resolveEndpoint(as, 'jwks_uri', false, options?.[allowInsecureRequests] !== true);\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  headers.append('accept', 'application/jwk-set+json');\n  return (options?.[customFetch] || fetch)(url.href, {\n    body: undefined,\n    headers: Object.fromEntries(headers.entries()),\n    method: 'GET',\n    redirect: 'manual',\n    signal: options?.signal ? signal(options.signal) : undefined\n  });\n}\nasync function processJwksResponse(response) {\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  if (response.status !== 200) {\n    throw OPE('\"response\" is not a conform JSON Web Key Set response (unexpected HTTP status code)', RESPONSE_IS_NOT_CONFORM, response);\n  }\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response, response => assertContentTypes(response, 'application/json', 'application/jwk-set+json'));\n  if (!Array.isArray(json.keys)) {\n    throw OPE('\"response\" body \"keys\" property must be an array', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  if (!Array.prototype.every.call(json.keys, isJsonObject)) {\n    throw OPE('\"response\" body \"keys\" property members must be JWK formatted objects', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  return json;\n}\nfunction supported(alg) {\n  switch (alg) {\n    case 'PS256':\n    case 'ES256':\n    case 'RS256':\n    case 'PS384':\n    case 'ES384':\n    case 'RS384':\n    case 'PS512':\n    case 'ES512':\n    case 'RS512':\n    case 'Ed25519':\n    case 'EdDSA':\n      return true;\n    default:\n      return false;\n  }\n}\nfunction checkSupportedJwsAlg(header) {\n  if (!supported(header.alg)) {\n    throw new UnsupportedOperationError('unsupported JWS \"alg\" identifier', {\n      cause: {\n        alg: header.alg\n      }\n    });\n  }\n}\nfunction checkRsaKeyAlgorithm(key) {\n  const {\n    algorithm\n  } = key;\n  if (typeof algorithm.modulusLength !== 'number' || algorithm.modulusLength < 2048) {\n    throw new UnsupportedOperationError(`unsupported ${algorithm.name} modulusLength`, {\n      cause: key\n    });\n  }\n}\nfunction ecdsaHashName(key) {\n  const {\n    algorithm\n  } = key;\n  switch (algorithm.namedCurve) {\n    case 'P-256':\n      return 'SHA-256';\n    case 'P-384':\n      return 'SHA-384';\n    case 'P-521':\n      return 'SHA-512';\n    default:\n      throw new UnsupportedOperationError('unsupported ECDSA namedCurve', {\n        cause: key\n      });\n  }\n}\nfunction keyToSubtle(key) {\n  switch (key.algorithm.name) {\n    case 'ECDSA':\n      return {\n        name: key.algorithm.name,\n        hash: ecdsaHashName(key)\n      };\n    case 'RSA-PSS':\n      {\n        checkRsaKeyAlgorithm(key);\n        switch (key.algorithm.hash.name) {\n          case 'SHA-256':\n          case 'SHA-384':\n          case 'SHA-512':\n            return {\n              name: key.algorithm.name,\n              saltLength: parseInt(key.algorithm.hash.name.slice(-3), 10) >> 3\n            };\n          default:\n            throw new UnsupportedOperationError('unsupported RSA-PSS hash name', {\n              cause: key\n            });\n        }\n      }\n    case 'RSASSA-PKCS1-v1_5':\n      checkRsaKeyAlgorithm(key);\n      return key.algorithm.name;\n    case 'Ed25519':\n      return key.algorithm.name;\n  }\n  throw new UnsupportedOperationError('unsupported CryptoKey algorithm name', {\n    cause: key\n  });\n}\nasync function validateJwsSignature(protectedHeader, payload, key, signature) {\n  const data = buf(`${protectedHeader}.${payload}`);\n  const algorithm = keyToSubtle(key);\n  const verified = await crypto.subtle.verify(algorithm, key, signature, data);\n  if (!verified) {\n    throw OPE('JWT signature verification failed', INVALID_RESPONSE, {\n      key,\n      data,\n      signature,\n      algorithm\n    });\n  }\n}\nasync function validateJwt(jws, checkAlg, clockSkew, clockTolerance, decryptJwt) {\n  let {\n    0: protectedHeader,\n    1: payload,\n    length\n  } = jws.split('.');\n  if (length === 5) {\n    if (decryptJwt !== undefined) {\n      jws = await decryptJwt(jws);\n      ({\n        0: protectedHeader,\n        1: payload,\n        length\n      } = jws.split('.'));\n    } else {\n      throw new UnsupportedOperationError('JWE decryption is not configured', {\n        cause: jws\n      });\n    }\n  }\n  if (length !== 3) {\n    throw OPE('Invalid JWT', INVALID_RESPONSE, jws);\n  }\n  let header;\n  try {\n    header = JSON.parse(buf(b64u(protectedHeader)));\n  } catch (cause) {\n    throw OPE('failed to parse JWT Header body as base64url encoded JSON', PARSE_ERROR, cause);\n  }\n  if (!isJsonObject(header)) {\n    throw OPE('JWT Header must be a top level object', INVALID_RESPONSE, jws);\n  }\n  checkAlg(header);\n  if (header.crit !== undefined) {\n    throw new UnsupportedOperationError('no JWT \"crit\" header parameter extensions are supported', {\n      cause: {\n        header\n      }\n    });\n  }\n  let claims;\n  try {\n    claims = JSON.parse(buf(b64u(payload)));\n  } catch (cause) {\n    throw OPE('failed to parse JWT Payload body as base64url encoded JSON', PARSE_ERROR, cause);\n  }\n  if (!isJsonObject(claims)) {\n    throw OPE('JWT Payload must be a top level object', INVALID_RESPONSE, jws);\n  }\n  const now = epochTime() + clockSkew;\n  if (claims.exp !== undefined) {\n    if (typeof claims.exp !== 'number') {\n      throw OPE('unexpected JWT \"exp\" (expiration time) claim type', INVALID_RESPONSE, {\n        claims\n      });\n    }\n    if (claims.exp <= now - clockTolerance) {\n      throw OPE('unexpected JWT \"exp\" (expiration time) claim value, expiration is past current timestamp', JWT_TIMESTAMP_CHECK, {\n        claims,\n        now,\n        tolerance: clockTolerance,\n        claim: 'exp'\n      });\n    }\n  }\n  if (claims.iat !== undefined) {\n    if (typeof claims.iat !== 'number') {\n      throw OPE('unexpected JWT \"iat\" (issued at) claim type', INVALID_RESPONSE, {\n        claims\n      });\n    }\n  }\n  if (claims.iss !== undefined) {\n    if (typeof claims.iss !== 'string') {\n      throw OPE('unexpected JWT \"iss\" (issuer) claim type', INVALID_RESPONSE, {\n        claims\n      });\n    }\n  }\n  if (claims.nbf !== undefined) {\n    if (typeof claims.nbf !== 'number') {\n      throw OPE('unexpected JWT \"nbf\" (not before) claim type', INVALID_RESPONSE, {\n        claims\n      });\n    }\n    if (claims.nbf > now + clockTolerance) {\n      throw OPE('unexpected JWT \"nbf\" (not before) claim value', JWT_TIMESTAMP_CHECK, {\n        claims,\n        now,\n        tolerance: clockTolerance,\n        claim: 'nbf'\n      });\n    }\n  }\n  if (claims.aud !== undefined) {\n    if (typeof claims.aud !== 'string' && !Array.isArray(claims.aud)) {\n      throw OPE('unexpected JWT \"aud\" (audience) claim type', INVALID_RESPONSE, {\n        claims\n      });\n    }\n  }\n  return {\n    header,\n    claims,\n    jwt: jws\n  };\n}\nasync function validateJwtAuthResponse(as, client, parameters, expectedState, options) {\n  assertAs(as);\n  assertClient(client);\n  if (parameters instanceof URL) {\n    parameters = parameters.searchParams;\n  }\n  if (!(parameters instanceof URLSearchParams)) {\n    throw CodedTypeError('\"parameters\" must be an instance of URLSearchParams, or URL', ERR_INVALID_ARG_TYPE);\n  }\n  const response = getURLSearchParameter(parameters, 'response');\n  if (!response) {\n    throw OPE('\"parameters\" does not contain a JARM response', INVALID_RESPONSE);\n  }\n  const {\n    claims,\n    header,\n    jwt\n  } = await validateJwt(response, checkSigningAlgorithm.bind(undefined, client.authorization_signed_response_alg, as.authorization_signing_alg_values_supported, 'RS256'), getClockSkew(client), getClockTolerance(client), options?.[jweDecrypt]).then(validatePresence.bind(undefined, ['aud', 'exp', 'iss'])).then(validateIssuer.bind(undefined, as)).then(validateAudience.bind(undefined, client.client_id));\n  const {\n    0: protectedHeader,\n    1: payload,\n    2: encodedSignature\n  } = jwt.split('.');\n  const signature = b64u(encodedSignature);\n  const key = await getPublicSigKeyFromIssuerJwksUri(as, options, header);\n  await validateJwsSignature(protectedHeader, payload, key, signature);\n  const result = new URLSearchParams();\n  for (const [key, value] of Object.entries(claims)) {\n    if (typeof value === 'string' && key !== 'aud') {\n      result.set(key, value);\n    }\n  }\n  return validateAuthResponse(as, client, result, expectedState);\n}\nasync function idTokenHash(data, header, claimName) {\n  let algorithm;\n  switch (header.alg) {\n    case 'RS256':\n    case 'PS256':\n    case 'ES256':\n      algorithm = 'SHA-256';\n      break;\n    case 'RS384':\n    case 'PS384':\n    case 'ES384':\n      algorithm = 'SHA-384';\n      break;\n    case 'RS512':\n    case 'PS512':\n    case 'ES512':\n    case 'Ed25519':\n    case 'EdDSA':\n      algorithm = 'SHA-512';\n      break;\n    default:\n      throw new UnsupportedOperationError(`unsupported JWS algorithm for ${claimName} calculation`, {\n        cause: {\n          alg: header.alg\n        }\n      });\n  }\n  const digest = await crypto.subtle.digest(algorithm, buf(data));\n  return b64u(digest.slice(0, digest.byteLength / 2));\n}\nasync function idTokenHashMatches(data, actual, header, claimName) {\n  const expected = await idTokenHash(data, header, claimName);\n  return actual === expected;\n}\nasync function validateDetachedSignatureResponse(as, client, parameters, expectedNonce, expectedState, maxAge, options) {\n  return validateHybridResponse(as, client, parameters, expectedNonce, expectedState, maxAge, options, true);\n}\nasync function validateCodeIdTokenResponse(as, client, parameters, expectedNonce, expectedState, maxAge, options) {\n  return validateHybridResponse(as, client, parameters, expectedNonce, expectedState, maxAge, options, false);\n}\nasync function consumeStream(request) {\n  if (request.bodyUsed) {\n    throw CodedTypeError('form_post Request instances must contain a readable body', ERR_INVALID_ARG_VALUE, {\n      cause: request\n    });\n  }\n  return request.text();\n}\nasync function formPostResponse(request) {\n  if (request.method !== 'POST') {\n    throw CodedTypeError('form_post responses are expected to use the POST method', ERR_INVALID_ARG_VALUE, {\n      cause: request\n    });\n  }\n  if (getContentType(request) !== 'application/x-www-form-urlencoded') {\n    throw CodedTypeError('form_post responses are expected to use the application/x-www-form-urlencoded content-type', ERR_INVALID_ARG_VALUE, {\n      cause: request\n    });\n  }\n  return consumeStream(request);\n}\nasync function validateHybridResponse(as, client, parameters, expectedNonce, expectedState, maxAge, options, fapi) {\n  assertAs(as);\n  assertClient(client);\n  if (parameters instanceof URL) {\n    if (!parameters.hash.length) {\n      throw CodedTypeError('\"parameters\" as an instance of URL must contain a hash (fragment) with the Authorization Response parameters', ERR_INVALID_ARG_VALUE);\n    }\n    parameters = new URLSearchParams(parameters.hash.slice(1));\n  } else if (looseInstanceOf(parameters, Request)) {\n    parameters = new URLSearchParams(await formPostResponse(parameters));\n  } else if (parameters instanceof URLSearchParams) {\n    parameters = new URLSearchParams(parameters);\n  } else {\n    throw CodedTypeError('\"parameters\" must be an instance of URLSearchParams, URL, or Response', ERR_INVALID_ARG_TYPE);\n  }\n  const id_token = getURLSearchParameter(parameters, 'id_token');\n  parameters.delete('id_token');\n  switch (expectedState) {\n    case undefined:\n    case expectNoState:\n      break;\n    default:\n      assertString(expectedState, '\"expectedState\" argument');\n  }\n  const result = validateAuthResponse(_objectSpread(_objectSpread({}, as), {}, {\n    authorization_response_iss_parameter_supported: false\n  }), client, parameters, expectedState);\n  if (!id_token) {\n    throw OPE('\"parameters\" does not contain an ID Token', INVALID_RESPONSE);\n  }\n  const code = getURLSearchParameter(parameters, 'code');\n  if (!code) {\n    throw OPE('\"parameters\" does not contain an Authorization Code', INVALID_RESPONSE);\n  }\n  const requiredClaims = ['aud', 'exp', 'iat', 'iss', 'sub', 'nonce', 'c_hash'];\n  const state = parameters.get('state');\n  if (fapi && (typeof expectedState === 'string' || state !== null)) {\n    requiredClaims.push('s_hash');\n  }\n  if (maxAge !== undefined) {\n    assertNumber(maxAge, false, '\"maxAge\" argument');\n  } else if (client.default_max_age !== undefined) {\n    assertNumber(client.default_max_age, false, '\"client.default_max_age\"');\n  }\n  maxAge ??= client.default_max_age ?? skipAuthTimeCheck;\n  if (client.require_auth_time || maxAge !== skipAuthTimeCheck) {\n    requiredClaims.push('auth_time');\n  }\n  const {\n    claims,\n    header,\n    jwt\n  } = await validateJwt(id_token, checkSigningAlgorithm.bind(undefined, client.id_token_signed_response_alg, as.id_token_signing_alg_values_supported, 'RS256'), getClockSkew(client), getClockTolerance(client), options?.[jweDecrypt]).then(validatePresence.bind(undefined, requiredClaims)).then(validateIssuer.bind(undefined, as)).then(validateAudience.bind(undefined, client.client_id));\n  const clockSkew = getClockSkew(client);\n  const now = epochTime() + clockSkew;\n  if (claims.iat < now - 3600) {\n    throw OPE('unexpected JWT \"iat\" (issued at) claim value, it is too far in the past', JWT_TIMESTAMP_CHECK, {\n      now,\n      claims,\n      claim: 'iat'\n    });\n  }\n  assertString(claims.c_hash, 'ID Token \"c_hash\" (code hash) claim value', INVALID_RESPONSE, {\n    claims\n  });\n  if (claims.auth_time !== undefined) {\n    assertNumber(claims.auth_time, false, 'ID Token \"auth_time\" (authentication time)', INVALID_RESPONSE, {\n      claims\n    });\n  }\n  if (maxAge !== skipAuthTimeCheck) {\n    const now = epochTime() + getClockSkew(client);\n    const tolerance = getClockTolerance(client);\n    if (claims.auth_time + maxAge < now - tolerance) {\n      throw OPE('too much time has elapsed since the last End-User authentication', JWT_TIMESTAMP_CHECK, {\n        claims,\n        now,\n        tolerance,\n        claim: 'auth_time'\n      });\n    }\n  }\n  assertString(expectedNonce, '\"expectedNonce\" argument');\n  if (claims.nonce !== expectedNonce) {\n    throw OPE('unexpected ID Token \"nonce\" claim value', JWT_CLAIM_COMPARISON, {\n      expected: expectedNonce,\n      claims,\n      claim: 'nonce'\n    });\n  }\n  if (Array.isArray(claims.aud) && claims.aud.length !== 1) {\n    if (claims.azp === undefined) {\n      throw OPE('ID Token \"aud\" (audience) claim includes additional untrusted audiences', JWT_CLAIM_COMPARISON, {\n        claims,\n        claim: 'aud'\n      });\n    }\n    if (claims.azp !== client.client_id) {\n      throw OPE('unexpected ID Token \"azp\" (authorized party) claim value', JWT_CLAIM_COMPARISON, {\n        expected: client.client_id,\n        claims,\n        claim: 'azp'\n      });\n    }\n  }\n  const {\n    0: protectedHeader,\n    1: payload,\n    2: encodedSignature\n  } = jwt.split('.');\n  const signature = b64u(encodedSignature);\n  const key = await getPublicSigKeyFromIssuerJwksUri(as, options, header);\n  await validateJwsSignature(protectedHeader, payload, key, signature);\n  if ((await idTokenHashMatches(code, claims.c_hash, header, 'c_hash')) !== true) {\n    throw OPE('invalid ID Token \"c_hash\" (code hash) claim value', JWT_CLAIM_COMPARISON, {\n      code,\n      alg: header.alg,\n      claim: 'c_hash',\n      claims\n    });\n  }\n  if (fapi && state !== null || claims.s_hash !== undefined) {\n    assertString(claims.s_hash, 'ID Token \"s_hash\" (state hash) claim value', INVALID_RESPONSE, {\n      claims\n    });\n    assertString(state, '\"state\" response parameter', INVALID_RESPONSE, {\n      parameters\n    });\n    if ((await idTokenHashMatches(state, claims.s_hash, header, 's_hash')) !== true) {\n      throw OPE('invalid ID Token \"s_hash\" (state hash) claim value', JWT_CLAIM_COMPARISON, {\n        state,\n        alg: header.alg,\n        claim: 's_hash',\n        claims\n      });\n    }\n  }\n  return result;\n}\nfunction checkSigningAlgorithm(client, issuer, fallback, header) {\n  if (client !== undefined) {\n    if (typeof client === 'string' ? header.alg !== client : !client.includes(header.alg)) {\n      throw OPE('unexpected JWT \"alg\" header parameter', INVALID_RESPONSE, {\n        header,\n        expected: client,\n        reason: 'client configuration'\n      });\n    }\n    return;\n  }\n  if (Array.isArray(issuer)) {\n    if (!issuer.includes(header.alg)) {\n      throw OPE('unexpected JWT \"alg\" header parameter', INVALID_RESPONSE, {\n        header,\n        expected: issuer,\n        reason: 'authorization server metadata'\n      });\n    }\n    return;\n  }\n  if (fallback !== undefined) {\n    if (typeof fallback === 'string' ? header.alg !== fallback : typeof fallback === 'function' ? !fallback(header.alg) : !fallback.includes(header.alg)) {\n      throw OPE('unexpected JWT \"alg\" header parameter', INVALID_RESPONSE, {\n        header,\n        expected: fallback,\n        reason: 'default value'\n      });\n    }\n    return;\n  }\n  throw OPE('missing client or server configuration to verify used JWT \"alg\" header parameter', undefined, {\n    client,\n    issuer,\n    fallback\n  });\n}\nfunction getURLSearchParameter(parameters, name) {\n  const {\n    0: value,\n    length\n  } = parameters.getAll(name);\n  if (length > 1) {\n    throw OPE(`\"${name}\" parameter must be provided only once`, INVALID_RESPONSE);\n  }\n  return value;\n}\nconst skipStateCheck = Symbol();\nconst expectNoState = Symbol();\nfunction validateAuthResponse(as, client, parameters, expectedState) {\n  assertAs(as);\n  assertClient(client);\n  if (parameters instanceof URL) {\n    parameters = parameters.searchParams;\n  }\n  if (!(parameters instanceof URLSearchParams)) {\n    throw CodedTypeError('\"parameters\" must be an instance of URLSearchParams, or URL', ERR_INVALID_ARG_TYPE);\n  }\n  if (getURLSearchParameter(parameters, 'response')) {\n    throw OPE('\"parameters\" contains a JARM response, use validateJwtAuthResponse() instead of validateAuthResponse()', INVALID_RESPONSE, {\n      parameters\n    });\n  }\n  const iss = getURLSearchParameter(parameters, 'iss');\n  const state = getURLSearchParameter(parameters, 'state');\n  if (!iss && as.authorization_response_iss_parameter_supported) {\n    throw OPE('response parameter \"iss\" (issuer) missing', INVALID_RESPONSE, {\n      parameters\n    });\n  }\n  if (iss && iss !== as.issuer) {\n    throw OPE('unexpected \"iss\" (issuer) response parameter value', INVALID_RESPONSE, {\n      expected: as.issuer,\n      parameters\n    });\n  }\n  switch (expectedState) {\n    case undefined:\n    case expectNoState:\n      if (state !== undefined) {\n        throw OPE('unexpected \"state\" response parameter encountered', INVALID_RESPONSE, {\n          expected: undefined,\n          parameters\n        });\n      }\n      break;\n    case skipStateCheck:\n      break;\n    default:\n      assertString(expectedState, '\"expectedState\" argument');\n      if (state !== expectedState) {\n        throw OPE(state === undefined ? 'response parameter \"state\" missing' : 'unexpected \"state\" response parameter value', INVALID_RESPONSE, {\n          expected: expectedState,\n          parameters\n        });\n      }\n  }\n  const error = getURLSearchParameter(parameters, 'error');\n  if (error) {\n    throw new AuthorizationResponseError('authorization response from the server is an error', {\n      cause: parameters\n    });\n  }\n  const id_token = getURLSearchParameter(parameters, 'id_token');\n  const token = getURLSearchParameter(parameters, 'token');\n  if (id_token !== undefined || token !== undefined) {\n    throw new UnsupportedOperationError('implicit and hybrid flows are not supported');\n  }\n  return brand(new URLSearchParams(parameters));\n}\nfunction algToSubtle(alg) {\n  switch (alg) {\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      return {\n        name: 'RSA-PSS',\n        hash: `SHA-${alg.slice(-3)}`\n      };\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      return {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: `SHA-${alg.slice(-3)}`\n      };\n    case 'ES256':\n    case 'ES384':\n      return {\n        name: 'ECDSA',\n        namedCurve: `P-${alg.slice(-3)}`\n      };\n    case 'ES512':\n      return {\n        name: 'ECDSA',\n        namedCurve: 'P-521'\n      };\n    case 'Ed25519':\n    case 'EdDSA':\n      return 'Ed25519';\n    default:\n      throw new UnsupportedOperationError('unsupported JWS algorithm', {\n        cause: {\n          alg\n        }\n      });\n  }\n}\nasync function importJwk(alg, jwk) {\n  const {\n      ext,\n      key_ops,\n      use\n    } = jwk,\n    key = _objectWithoutProperties(jwk, _excluded);\n  return crypto.subtle.importKey('jwk', key, algToSubtle(alg), true, ['verify']);\n}\nasync function deviceAuthorizationRequest(as, client, clientAuthentication, parameters, options) {\n  assertAs(as);\n  assertClient(client);\n  const url = resolveEndpoint(as, 'device_authorization_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const body = new URLSearchParams(parameters);\n  body.set('client_id', client.client_id);\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  return authenticatedRequest(as, client, clientAuthentication, url, body, headers, options);\n}\nasync function processDeviceAuthorizationResponse(as, client, response) {\n  assertAs(as);\n  assertClient(client);\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 200, 'Device Authorization Endpoint');\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.device_code, '\"response\" body \"device_code\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  assertString(json.user_code, '\"response\" body \"user_code\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  assertString(json.verification_uri, '\"response\" body \"verification_uri\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  let expiresIn = typeof json.expires_in !== 'number' ? parseFloat(json.expires_in) : json.expires_in;\n  assertNumber(expiresIn, false, '\"response\" body \"expires_in\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  json.expires_in = expiresIn;\n  if (json.verification_uri_complete !== undefined) {\n    assertString(json.verification_uri_complete, '\"response\" body \"verification_uri_complete\" property', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  if (json.interval !== undefined) {\n    assertNumber(json.interval, false, '\"response\" body \"interval\" property', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  return json;\n}\nasync function deviceCodeGrantRequest(as, client, clientAuthentication, deviceCode, options) {\n  assertAs(as);\n  assertClient(client);\n  assertString(deviceCode, '\"deviceCode\"');\n  const parameters = new URLSearchParams(options?.additionalParameters);\n  parameters.set('device_code', deviceCode);\n  return tokenEndpointRequest(as, client, clientAuthentication, 'urn:ietf:params:oauth:grant-type:device_code', parameters, options);\n}\nasync function processDeviceCodeResponse(as, client, response, options) {\n  return processGenericAccessTokenResponse(as, client, response, undefined, options);\n}\nasync function generateKeyPair(alg, options) {\n  assertString(alg, '\"alg\"');\n  const algorithm = algToSubtle(alg);\n  if (alg.startsWith('PS') || alg.startsWith('RS')) {\n    Object.assign(algorithm, {\n      modulusLength: options?.modulusLength ?? 2048,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01])\n    });\n  }\n  return crypto.subtle.generateKey(algorithm, options?.extractable ?? false, ['sign', 'verify']);\n}\nfunction normalizeHtu(htu) {\n  const url = new URL(htu);\n  url.search = '';\n  url.hash = '';\n  return url.href;\n}\nasync function validateDPoP(request, accessToken, accessTokenClaims, options) {\n  const headerValue = request.headers.get('dpop');\n  if (headerValue === null) {\n    throw OPE('operation indicated DPoP use but the request has no DPoP HTTP Header', INVALID_REQUEST, {\n      headers: request.headers\n    });\n  }\n  if (request.headers.get('authorization')?.toLowerCase().startsWith('dpop ') === false) {\n    throw OPE(`operation indicated DPoP use but the request's Authorization HTTP Header scheme is not DPoP`, INVALID_REQUEST, {\n      headers: request.headers\n    });\n  }\n  if (typeof accessTokenClaims.cnf?.jkt !== 'string') {\n    throw OPE('operation indicated DPoP use but the JWT Access Token has no jkt confirmation claim', INVALID_REQUEST, {\n      claims: accessTokenClaims\n    });\n  }\n  const clockSkew = getClockSkew(options);\n  const proof = await validateJwt(headerValue, checkSigningAlgorithm.bind(undefined, options?.signingAlgorithms, undefined, supported), clockSkew, getClockTolerance(options), undefined).then(checkJwtType.bind(undefined, 'dpop+jwt')).then(validatePresence.bind(undefined, ['iat', 'jti', 'ath', 'htm', 'htu']));\n  const now = epochTime() + clockSkew;\n  const diff = Math.abs(now - proof.claims.iat);\n  if (diff > 300) {\n    throw OPE('DPoP Proof iat is not recent enough', JWT_TIMESTAMP_CHECK, {\n      now,\n      claims: proof.claims,\n      claim: 'iat'\n    });\n  }\n  if (proof.claims.htm !== request.method) {\n    throw OPE('DPoP Proof htm mismatch', JWT_CLAIM_COMPARISON, {\n      expected: request.method,\n      claims: proof.claims,\n      claim: 'htm'\n    });\n  }\n  if (typeof proof.claims.htu !== 'string' || normalizeHtu(proof.claims.htu) !== normalizeHtu(request.url)) {\n    throw OPE('DPoP Proof htu mismatch', JWT_CLAIM_COMPARISON, {\n      expected: normalizeHtu(request.url),\n      claims: proof.claims,\n      claim: 'htu'\n    });\n  }\n  {\n    const expected = b64u(await crypto.subtle.digest('SHA-256', buf(accessToken)));\n    if (proof.claims.ath !== expected) {\n      throw OPE('DPoP Proof ath mismatch', JWT_CLAIM_COMPARISON, {\n        expected,\n        claims: proof.claims,\n        claim: 'ath'\n      });\n    }\n  }\n  {\n    let components;\n    switch (proof.header.jwk.kty) {\n      case 'EC':\n        components = {\n          crv: proof.header.jwk.crv,\n          kty: proof.header.jwk.kty,\n          x: proof.header.jwk.x,\n          y: proof.header.jwk.y\n        };\n        break;\n      case 'OKP':\n        components = {\n          crv: proof.header.jwk.crv,\n          kty: proof.header.jwk.kty,\n          x: proof.header.jwk.x\n        };\n        break;\n      case 'RSA':\n        components = {\n          e: proof.header.jwk.e,\n          kty: proof.header.jwk.kty,\n          n: proof.header.jwk.n\n        };\n        break;\n      default:\n        throw new UnsupportedOperationError('unsupported JWK key type', {\n          cause: proof.header.jwk\n        });\n    }\n    const expected = b64u(await crypto.subtle.digest('SHA-256', buf(JSON.stringify(components))));\n    if (accessTokenClaims.cnf.jkt !== expected) {\n      throw OPE('JWT Access Token confirmation mismatch', JWT_CLAIM_COMPARISON, {\n        expected,\n        claims: accessTokenClaims,\n        claim: 'cnf.jkt'\n      });\n    }\n  }\n  const {\n    0: protectedHeader,\n    1: payload,\n    2: encodedSignature\n  } = headerValue.split('.');\n  const signature = b64u(encodedSignature);\n  const {\n    jwk,\n    alg\n  } = proof.header;\n  if (!jwk) {\n    throw OPE('DPoP Proof is missing the jwk header parameter', INVALID_REQUEST, {\n      header: proof.header\n    });\n  }\n  const key = await importJwk(alg, jwk);\n  if (key.type !== 'public') {\n    throw OPE('DPoP Proof jwk header parameter must contain a public key', INVALID_REQUEST, {\n      header: proof.header\n    });\n  }\n  await validateJwsSignature(protectedHeader, payload, key, signature);\n}\nasync function validateJwtAccessToken(as, request, expectedAudience, options) {\n  assertAs(as);\n  if (!looseInstanceOf(request, Request)) {\n    throw CodedTypeError('\"request\" must be an instance of Request', ERR_INVALID_ARG_TYPE);\n  }\n  assertString(expectedAudience, '\"expectedAudience\"');\n  const authorization = request.headers.get('authorization');\n  if (authorization === null) {\n    throw OPE('\"request\" is missing an Authorization HTTP Header', INVALID_REQUEST, {\n      headers: request.headers\n    });\n  }\n  let {\n    0: scheme,\n    1: accessToken,\n    length\n  } = authorization.split(' ');\n  scheme = scheme.toLowerCase();\n  switch (scheme) {\n    case 'dpop':\n    case 'bearer':\n      break;\n    default:\n      throw new UnsupportedOperationError('unsupported Authorization HTTP Header scheme', {\n        cause: {\n          headers: request.headers\n        }\n      });\n  }\n  if (length !== 2) {\n    throw OPE('invalid Authorization HTTP Header format', INVALID_REQUEST, {\n      headers: request.headers\n    });\n  }\n  const requiredClaims = ['iss', 'exp', 'aud', 'sub', 'iat', 'jti', 'client_id'];\n  if (options?.requireDPoP || scheme === 'dpop' || request.headers.has('dpop')) {\n    requiredClaims.push('cnf');\n  }\n  const {\n    claims,\n    header\n  } = await validateJwt(accessToken, checkSigningAlgorithm.bind(undefined, options?.signingAlgorithms, undefined, supported), getClockSkew(options), getClockTolerance(options), undefined).then(checkJwtType.bind(undefined, 'at+jwt')).then(validatePresence.bind(undefined, requiredClaims)).then(validateIssuer.bind(undefined, as)).then(validateAudience.bind(undefined, expectedAudience)).catch(reassignRSCode);\n  for (const claim of ['client_id', 'jti', 'sub']) {\n    if (typeof claims[claim] !== 'string') {\n      throw OPE(`unexpected JWT \"${claim}\" claim type`, INVALID_REQUEST, {\n        claims\n      });\n    }\n  }\n  if ('cnf' in claims) {\n    if (!isJsonObject(claims.cnf)) {\n      throw OPE('unexpected JWT \"cnf\" (confirmation) claim value', INVALID_REQUEST, {\n        claims\n      });\n    }\n    const {\n      0: cnf,\n      length\n    } = Object.keys(claims.cnf);\n    if (length) {\n      if (length !== 1) {\n        throw new UnsupportedOperationError('multiple confirmation claims are not supported', {\n          cause: {\n            claims\n          }\n        });\n      }\n      if (cnf !== 'jkt') {\n        throw new UnsupportedOperationError('unsupported JWT Confirmation method', {\n          cause: {\n            claims\n          }\n        });\n      }\n    }\n  }\n  const {\n    0: protectedHeader,\n    1: payload,\n    2: encodedSignature\n  } = accessToken.split('.');\n  const signature = b64u(encodedSignature);\n  const key = await getPublicSigKeyFromIssuerJwksUri(as, options, header);\n  await validateJwsSignature(protectedHeader, payload, key, signature);\n  if (options?.requireDPoP || scheme === 'dpop' || claims.cnf?.jkt !== undefined || request.headers.has('dpop')) {\n    await validateDPoP(request, accessToken, claims, options).catch(reassignRSCode);\n  }\n  return claims;\n}\nfunction reassignRSCode(err) {\n  if (err instanceof OperationProcessingError && err?.code === INVALID_REQUEST) {\n    err.code = INVALID_RESPONSE;\n  }\n  throw err;\n}\nasync function backchannelAuthenticationRequest(as, client, clientAuthentication, parameters, options) {\n  assertAs(as);\n  assertClient(client);\n  const url = resolveEndpoint(as, 'backchannel_authentication_endpoint', client.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const body = new URLSearchParams(parameters);\n  body.set('client_id', client.client_id);\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  return authenticatedRequest(as, client, clientAuthentication, url, body, headers, options);\n}\nasync function processBackchannelAuthenticationResponse(as, client, response) {\n  assertAs(as);\n  assertClient(client);\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 200, 'Backchannel Authentication Endpoint');\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.auth_req_id, '\"response\" body \"auth_req_id\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  let expiresIn = typeof json.expires_in !== 'number' ? parseFloat(json.expires_in) : json.expires_in;\n  assertNumber(expiresIn, false, '\"response\" body \"expires_in\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  json.expires_in = expiresIn;\n  if (json.interval !== undefined) {\n    assertNumber(json.interval, false, '\"response\" body \"interval\" property', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  return json;\n}\nasync function backchannelAuthenticationGrantRequest(as, client, clientAuthentication, authReqId, options) {\n  assertAs(as);\n  assertClient(client);\n  assertString(authReqId, '\"authReqId\"');\n  const parameters = new URLSearchParams(options?.additionalParameters);\n  parameters.set('auth_req_id', authReqId);\n  return tokenEndpointRequest(as, client, clientAuthentication, 'urn:openid:params:grant-type:ciba', parameters, options);\n}\nasync function processBackchannelAuthenticationGrantResponse(as, client, response, options) {\n  return processGenericAccessTokenResponse(as, client, response, undefined, options);\n}\nasync function dynamicClientRegistrationRequest(as, metadata, options) {\n  assertAs(as);\n  const url = resolveEndpoint(as, 'registration_endpoint', metadata.use_mtls_endpoint_aliases, options?.[allowInsecureRequests] !== true);\n  const headers = prepareHeaders(options?.headers);\n  headers.set('accept', 'application/json');\n  headers.set('content-type', 'application/json');\n  const method = 'POST';\n  if (options?.DPoP) {\n    assertDPoP(options.DPoP);\n    await options.DPoP.addProof(url, headers, method, options.initialAccessToken);\n  }\n  if (options?.initialAccessToken) {\n    headers.set('authorization', `${headers.has('dpop') ? 'DPoP' : 'Bearer'} ${options.initialAccessToken}`);\n  }\n  const response = await (options?.[customFetch] || fetch)(url.href, {\n    body: JSON.stringify(metadata),\n    headers: Object.fromEntries(headers.entries()),\n    method,\n    redirect: 'manual',\n    signal: options?.signal ? signal(options.signal) : undefined\n  });\n  options?.DPoP?.cacheNonce(response);\n  return response;\n}\nasync function processDynamicClientRegistrationResponse(response) {\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  checkAuthenticationChallenges(response);\n  await checkOAuthBodyError(response, 201, 'Dynamic Client Registration Endpoint');\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.client_id, '\"response\" body \"client_id\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  if (json.client_secret !== undefined) {\n    assertString(json.client_secret, '\"response\" body \"client_secret\" property', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  if (json.client_secret) {\n    assertNumber(json.client_secret_expires_at, true, '\"response\" body \"client_secret_expires_at\" property', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  return json;\n}\nasync function resourceDiscoveryRequest(resourceIdentifier, options) {\n  return performDiscovery(resourceIdentifier, 'resourceIdentifier', url => {\n    prependWellKnown(url, '.well-known/oauth-protected-resource');\n    return url;\n  }, options);\n}\nasync function processResourceDiscoveryResponse(expectedResourceIdentifier, response) {\n  const expected = expectedResourceIdentifier;\n  if (!(expected instanceof URL) && expected !== _nodiscoverycheck) {\n    throw CodedTypeError('\"expectedResourceIdentifier\" must be an instance of URL', ERR_INVALID_ARG_TYPE);\n  }\n  if (!looseInstanceOf(response, Response)) {\n    throw CodedTypeError('\"response\" must be an instance of Response', ERR_INVALID_ARG_TYPE);\n  }\n  if (response.status !== 200) {\n    throw OPE('\"response\" is not a conform Resource Server Metadata response (unexpected HTTP status code)', RESPONSE_IS_NOT_CONFORM, response);\n  }\n  assertReadableResponse(response);\n  const json = await getResponseJsonBody(response);\n  assertString(json.resource, '\"response\" body \"resource\" property', INVALID_RESPONSE, {\n    body: json\n  });\n  if (expected !== _nodiscoverycheck && new URL(json.resource).href !== expected.href) {\n    throw OPE('\"response\" body \"resource\" property does not match the expected value', JSON_ATTRIBUTE_COMPARISON, {\n      expected: expected.href,\n      body: json,\n      attribute: 'resource'\n    });\n  }\n  return json;\n}\nasync function getResponseJsonBody(response, check = assertApplicationJson) {\n  let json;\n  try {\n    json = await response.json();\n  } catch (cause) {\n    check(response);\n    throw OPE('failed to parse \"response\" body as JSON', PARSE_ERROR, cause);\n  }\n  if (!isJsonObject(json)) {\n    throw OPE('\"response\" body must be a top level object', INVALID_RESPONSE, {\n      body: json\n    });\n  }\n  return json;\n}\nconst _nopkce = Symbol();\nconst _nodiscoverycheck = Symbol();\nconst _expectedIssuer = Symbol();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth4webapi/build/index.js\n");

/***/ })

};
;